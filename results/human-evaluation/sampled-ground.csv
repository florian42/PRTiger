source,result
"<desc> the issue was: if someone mentions an user that is not following the thread, that user (the user mentioned) would not get a notification. also fixes #14019 by always using the sender as the email from </desc> <cmt> fix sending notifications to mentions on threads </cmt> <cmt> always use the sender name as email from field </cmt> <iss> mentions email inside discussions uses the wrong name property </iss>","[{'bart': 'fix sending notifications to mentions on threads'}, {'gold': 'fix sending notifications to mentions on threads and discussion email sender'}, {'t5': 'always use the sender as the email from field'}]"
"<desc> this introduces a new option setoption22 which is related to setoption20. it can essentially be described as ""apply setoption20 setting to commands from the faceplate"" see #469 for more info. </desc> <cmt> tuya: fix setoption20 for oittm/moes </cmt> <cmt> tuya: add setoption22 to select if brightness-commands from faceplate should be ignored while powered off </cmt>","[{'bart': 'setoption22 to select if brightness-commands from faceplate should be ignored while powered off'}, {'gold': 'fix setoption20 behavior for oittm/moes'}, {'t5': 'fix setoption20 for oittm/moes'}]"
"<desc> fixes two regressions that were introduced in swift 5.2: default arguments of local functions inside @inlinable functions were not serialized, which would cause a sil verifier failure if the default argument was referenced there was no enforcement that these default arguments did not reference non-public symbols, which again could cause crashes. fixes rdar://problem/62200974 / </desc> <cmt> ast: diagnose references to non-public declarations from default arguments of inlinable local functions </cmt> <cmt> part of < </cmt> <cmt> sil: serialize default arguments of inlinable local functions </cmt> <cmt> fixes < </cmt>","[{'t5': 'fix default arguments of inlinable local functions'}, {'gold': 'fix default arguments of inlinable local functions [5.3]'}, {'bart': 'serialize default arguments of inlinable local functions'}]"
<desc> remove performance tests of type once. this is needed to run all performance tests in statistical comparison mode (more reliable). </desc> <cmt> remove infinite performance tests </cmt> <cmt> renamed a test </cmt> <cmt> removed outdated info </cmt> <cmt> addition to prev. revision </cmt> <cmt> remove unused features from performance test </cmt>,"[{'t5': 'remove performance tests of type once'}, {'gold': 'remove performance tests of type ""once"", finally.'}, {'bart': 'remove performance tests of type once'}]"
<desc> win: implement double-clicked event. win: fix regression caused by #2328 that bounds is always empty. win: pass modifers in clicked events. use the dom's way of telling modifiers. </desc> <cmt> win: implement double-clicked event </cmt> <cmt> docs: don't say things that are expected </cmt> <cmt> win: set guid when getting icon's bounds </cmt> <cmt> win: pass modifers in 'clicked' events </cmt>,"[{'gold': 'fix a few things of tray'}, {'bart': 'implement double-clicked event and pass modifers in clicked events'}, {'t5': 'fix regression caused by #2328 that bounds is always empty'}]"
<desc> case 1. add a new type definition. checked compilation succeeds with --target es6 and --noimplicitany options. has correct naming convention has a test file with the suffix of  -tests.ts or -tests.tsx. </desc> <cmt> create electronic-json-storage.d.ts </cmt> <cmt> create electronic-json-storage-tests.ts </cmt> <cmt> update electronic-json-storage-tests.ts </cmt> <cmt> update electronic-json-storage-tests.ts </cmt>,"[{'t5': 'add type definition to json-storage-tests.ts'}, {'bart': 'add type definition for electronic json storage'}, {'gold': 'type definitions and tests for electron-json-storage'}]"
"<desc> update spanish translations and fix some grammar mistakes. jira: none </desc> <cmt> complete and fix the spanish translation on setup </cmt> <cmt> correct the random names, fixing the denominations, translate of the english words, and fixing random and incorrect denominations like ""cabinet"" or ""distribuciones"". </cmt> <cmt> complete and fix the spanish translation on setup </cmt>","[{'t5': 'complete and fix spanish translations on setup'}, {'bart': 'complete and fix the spanish translation on setup'}, {'gold': 'update spanish translation of usetup.'}]"
"<desc> remove compatibility module from actioncontroller, either by cleaning up code that is going to be deprecated in 3.2, or by moving code to their right places inside actioncontroller modules. i'm sending a second pull request for 3-2-stable branch deprecating most of the methods inside this module. please let me know if something should be improved. thanks. </desc> <cmt> remove old compatibility methods not being used </cmt> <cmt> remove constant already defined in exceptions module </cmt> <cmt> remove other old compatibility constants </cmt> <cmt> remove rescue_action from compatibility module and tests </cmt> <cmt> remove relative url root setting from env var </cmt> <cmt> this is already being set by rails configuration. </cmt> <cmt> remove deprecated logic to render templates starting with / </cmt> <cmt> render :template => ""/foo/bar"" </cmt> <cmt> rename test class and fix tests to keep consistency </cmt> <cmt> based on 50d23bc2bd3653b3c66e480c22ae97c5f7fd7f62. </cmt> <cmt> move render :nothing and :text => nil options to ac::rendering </cmt> <cmt> refactor render nothing/text => nil logic, and move to right place </cmt> <cmt> options :nothing and :text => nil should be handled by </cmt> <cmt> actioncontroller::rendering instead. </cmt> <cmt> remove method missing handling when action is not found, use action missing instead </cmt> <cmt> do not create a method_missing method to handle not found actions, use </cmt> <cmt> the action_missing method provided by rails instead. </cmt> <cmt> move render_to_body logic to return a spaced string to ac::rendering </cmt> <cmt> this seems to be required only when calling render :partial with an </cmt> <cmt> empty collection from a controller. this call happens to return no </cmt> <cmt> content, letting the response body empty, which means to rails that it </cmt> <cmt> should go on and try to find a template to render based on the current </cmt> <cmt> action name, thus failing hard. </cmt> <cmt> although tests keep all green, we need to check a better way to fix </cmt> <cmt> this. </cmt> <cmt> remove deprecated default_charset= from ac::base </cmt> <cmt> this should be set globally as a configuration, using </cmt> <cmt> config.action_dispatch.default_charset instead </cmt> <cmt> move protected instance variables definition, kill compatibility module </cmt> <cmt> bring back rendering templates that start with / in nested structures </cmt> <cmt> update changelog </cmt>","[{'t5': 'remove compatibility module from actioncontroller'}, {'gold': 'action controller refactor - remove compatibility module'}, {'bart': 'remove compatibility module from actioncontroller'}]"
"<desc> add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). the package does not already provide its own types, or cannot have its .d.ts files generated via --declaration create it with dts-gen --dt, not by basing it on an existing project. tslint.json should be present, and tsconfig.json should have noimplicitany, noimplicitthis, strictnullchecks, and strictfunctiontypes set to true. </desc> <cmt> types for the datatables.net scroller extension </cmt> <cmt> reformatted for dtslint </cmt> <cmt> neu erstellt mit dts-gen </cmt> <cmt> another dtslint fix. </cmt>","[{'t5': 'dtslint - dts-gen - dts-gen'}, {'bart': 'types for the datatables.net scroller extension'}, {'gold': 'types for datatables.net scroller extension'}]"
"<desc> the readme file for the ergodox ez section suggested creating a pull-request to add our custom firmware, so i thought i'd give it a go. motivation essentially, i wanted to switch to a layout that was less jarring than the default ergodox ez layout, and did not require finger gymnastics to perform common os x shortcuts (most of which involve the cmd (lgui) key). how is it different from the default ergodox ez layout? this layout more closely resembles that of the mac keyboard, and has some other goodness baked in. here is a rundown of what that means: mac-like changes the key to the left of ""1"" is ""~"" instead of ""="". the key to the right of ""0"" is backspace instead of ""-"" (misleadingly labeled ""delete"" on the mac's keyboard). there was no room to fit in ""-"" and ""="" between ""0"" and backspace, unfortunately. the key to the left of ""q"" is tab instead of delete. the rightmost big key on the left thumb is cmd (lgui) instead of backspace. other changes the button to the left of ""a"" is ctrl/esc instead of backspace. this is actually how i have the keyboard on my macbook set up to be, since it's loads more convenient than a  caps lock key. this is the ctrl key i find myself using most. the key to the right of ""5"" and the key to left of ""6"" are ""["" and ""]"", respectively, instead of left and right. there is a more convenient set of left and right already present. truth be told, i don't really use these keys, as they are a stretch to reach. the toggle l1 keys have been replaced by the otherwise displaced ""-"" and ""="". they are laid out, left-to-right, in the same order as on the mac keyboard. honestly, they are not terribly conveniently placed, and their placement might change in a later version. i found that i did not toggle l1 frequently at all, and found using the momentary keys to access l1 to fit my workflow better. the ""~""/l1 key in the bottom-left is now just momentary l1. the ""~"" key was moved to the top-left as mentioned before, and i like to keep my multi-use keys to a minimum due to the latency for them to switch from ""press"" to ""hold."" the home and end buttons have been shifted up on the left thumb, and shift inserted below them. this makes doing shift-5 and other such combinations less painful. the page up and page down buttons have been shifted up on the right thumb, and alt was moved from above them to below them. i use alt more than page up or page down (mostly in terminal applications), and thought that it deserved a more accessible location. i'm always open to feedback and/or suggestions! </desc> <cmt> version 1.0.0 </cmt> <cmt> change lower-left control to momentary l1 </cmt> <cmt> there's so many control keys in this keymap, one needed to go. so, i changed </cmt> <cmt> the lower-left control key to be a momentary l1, just like the same key on the </cmt> <cmt> right side. </cmt>","[{'t5': 'change lower-left control to momentary l1'}, {'gold': ""add j3rn's mac-centric ergodox ez keymap""}, {'bart': 'update ergodox ez to version 1.0.0'}]"
"<desc> firstly, the indicators in cpusidebar aren't shown for loopxx instructions. also, back in the days when you selected loopxx instruction, you could spot the hint like ""jump is taken"" or ""jump is not taken"" in the cpuinfobox. i believe this was deleted by this commit 6348cb5 after changes in cpuinfobox::disasmselectionchanged because it is still present in my april snapshot. however, it was working incorrectly. this is, because the loop instruction firstly decrements the ecx, then checks if it's != 0. i will try to explain it using images. ecx = 0, ""jump is not taken"" in the info box however... the jump is in fact taken, ecx = 0xffffffff now when the ecx = 1, ""jump is taken"" in the info box however... the jump is not taken, ecx = 0 x64dbg needs to check whether the ecx = 1 to check if the branch is going to execute, that is because both decrementation and comparison is done inside the cpu loop instruction handler </desc> <cmt> gui: make loop conditional instruction, fixes #2366 </cmt> <cmt> zydis: fixed isbranchgoingtoexecute for loopxx instructions </cmt>","[{'gold': 'changes connected to loopxx instructions'}, {'t5': 'fix loop instruction indicators in cpusidebar'}, {'bart': 'fix isbranchgoingtoexecute for loopxx instructions'}]"
"<desc> follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present).  increase the version number in the header if appropriate. if you are making substantial changes, consider adding a tslint.json containing { ""extends"": ""dtslint/dt.json"" }. </desc> <cmt> update lolex typings. </cmt> <cmt> bugfix in tsconfig.json - non-existing compiler option. </cmt>","[{'t5': 'update lolex typings. bugfix in tsconfig.json - non-existing compiler option.'}, {'gold': 'update lolex typings with nexttick() and new clock.install() signature'}, {'bart': 'update typings in tsconfig.json - non-existing compiler option.'}]"
"<desc> add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). the package does not already provide its own types, or cannot have its .d.ts files generated via --declaration create it with dts-gen --dt, not by basing it on an existing project. tslint.json should be present, and tsconfig.json should have noimplicitany, noimplicitthis, strictnullchecks, and strictfunctiontypes set to true. </desc> <cmt> added: initial files, more work needed </cmt> <cmt> fixed: more classes </cmt> <cmt> fixed: some fixes to incorrect types so that gods has no errors </cmt> <cmt> improved: more strick tsconfig </cmt> <cmt> fixed: tslint.json typo in filename </cmt> <cmt> fixed: npm test errors </cmt> <cmt> added: umd global var athenajs </cmt>","[{'bart': 'add umd global var athenajs'}, {'gold': 'added definitions for the athenajs npm package'}, {'t5': 'fix tsconfig, tsconfig, and tsconfig.json typos'}]"
<desc> fix merge conflict on master-next due to afc8762. </desc> <cmt> [immediate] fix static constructor/destructor calls in runimmediately. </cmt> <cmt> removes a redundant call to lljit::runconstructors and adds a call to </cmt> <cmt> lljit::rundestructors. </cmt> <cmt> [immediate] fix static constructor/destructor calls in runimmediately. </cmt>,"[{'t5': 'fix merge conflict on master-next'}, {'gold': 'fix merge conflict in lib/immediate/immediate.cpp'}, {'bart': 'fix merge conflict on master-next due to afc8762'}]"
"<desc> implement callbacks to collect worker stats in node manager. i've run scripts/format.sh to lint the changes in this pr. i've included any doc changes needed for  i've made sure the tests are passing. note that there might be a few flaky tests, see the recent failure rates at </desc> <cmt> callback status canceld when collecting worker stats </cmt> <cmt> add get core worker stats handler in core worker </cmt>","[{'bart': 'add callbacks to collect worker stats in node manager'}, {'t5': 'fix callbacks to collect worker stats in node manager'}, {'gold': 'collecting worker stats in node manager and implement webui display in the backend'}]"
"<desc> resolves #21676. fixes failing test added in #21677 when adding the new suspense/offscreen effects semantics, we intentionally left out the subtreeflags checks since these values aren't 100% reliable and the check is just an optimization. (refer to the // todo (offscreen) comments in the source code.) it looks like #21386 (re)added one though, which was causing a failure case originally reported here: reactwg/react-18#31 for now, this pr just removes that check and adds a follow up todo comment. this is just a bandaid fix to allow us to resume rolling out the new suspense layout semantics. a proper long-term fix would be to identify why the subtreeflags are incorrect in this case. </desc> <cmt> add failing test for suspense layout semantics </cmt> <cmt> removed subtreeflags check from commitlayouteffects_begin() </cmt> <cmt> this was preventing layout effects from being recreated within offscreen subtrees in some conditions. </cmt> <iss> bug: layout effects don't re-fire in 18 on suspense re-showing </iss>","[{'gold': 'fix for failed suspense layout semantics'}, {'t5': ""fix layout effects don't re-fire in 18 on suspense re-showing""}, {'bart': 'fix suspense/offscreen effects re-showing'}]"
<desc> i have read freecodecamp's contribution guidelines. my pull request has a descriptive title (not a vague title like update index.md) my pull request targets the main branch of freecodecamp. </desc> <cmt> i18n italian compliements </cmt> <cmt> first 10 motivational quotes for italian </cmt>,"[{'gold': 'adding first few motivational quotes and compliments in italian'}, {'bart': 'i18n italian italian compliements'}, {'t5': 'italian compliements first 10 motivational quotes for italian'}]"
"<desc> the short version: this pr implements the currentcolor identifier, which acts somewhat like a pointer to the color property. it's useful for say, setting an underline to always match the text color, and it's the initial-value for several properties. making it actually work exposed a few bugs in other things, so this also fixes: ""0"" failing to parse as a css number several incorrect initial values in properties.json and i made a few places use the generated property_initial_value() function instead of hard-coding things. it's not perfect. for example, border: 2px solid; correctly uses the default of currentcolor, but border-width: 2px; border-style: solid; doesn't. but i couldn't figure out why, and that's an edge case, and i've been on enough tangents with this, so i'm leaving it for now. :^) </desc> <cmt> libweb: make stylevalue::to_color() take a node instead of the document </cmt> <cmt> this is in preparation for the currentcolor value, which needs to know </cmt> <cmt> what node it's on so it can check the color. </cmt> <cmt> libweb: implement currentcolor special value </cmt> <cmt> the currentcolor identifier represents the current value of the </cmt> <cmt> color property. this is the default value for border-color and </cmt> <cmt> text-decoration-color, and is generally useful to have. :^) </cmt> <cmt> libweb: persuade css parser that idents like currentcolor are colors </cmt> <cmt> shorthand properties were only checking for colorstylevalues, which </cmt> <cmt> excludes identifier colors. now they accept them too, including the </cmt> <cmt> various -libweb-foo colors. :^) </cmt> <cmt> libweb: make ""currentcolor"" lowercase in properties.json </cmt> <cmt> it's technically case-insensitive, but the spec always defines it as </cmt> <cmt> ""currentcolor"" so it feels wrong to capitalise it differently there. </cmt> <cmt> libweb: stop treating eof as a valid part of an identifier </cmt> <cmt> this was specifically causing the string ""0"" to be parsed as an invalid </cmt> <cmt> dimension token with no units, instead of as a number. that then caused </cmt> <cmt> out generated property_initial_value() function to fail for those </cmt> <cmt> values. </cmt> <cmt> libweb: generate shorthand initial values after their longhands </cmt> <cmt> when parsing shorthand values, we'd like to use </cmt> <cmt> property_initial_value() to get their longhand property values, </cmt> <cmt> instead of hard-coding them as we currently do. that involves </cmt> <cmt> recursively calling that function while the initial_values map is </cmt> <cmt> being initialized, which causes problems because the shorthands appear </cmt> <cmt> alphabetically before their longhand components, so the longhands aren't </cmt> <cmt> initialized yet! </cmt> <cmt> the solution here is to perform 2 passes when generating the code, </cmt> <cmt> outputting properties without ""longhands"" first, and the rest after. </cmt> <cmt> this could potentially cause issues when shorthands have multiple </cmt> <cmt> levels, in particular border -> border-color -> border-left-color. </cmt> <cmt> but, we do not currently define a default value for border, and </cmt> <cmt> border-color takes only a single value, so it's fine for now. :^) </cmt> <cmt> libweb: add some more css identifiers </cmt> <cmt> these are used by the ""initial"" values in properties.json </cmt> <cmt> libweb: correct some initial values and add missing ones </cmt> <cmt> - the text-decoration-foo values now match the spec. </cmt> <cmt> - added values for border-foo since those are needed soon. </cmt> <cmt> - make color's initial value be -libweb-palette-base-text. </cmt> <cmt> libweb: use initial values from properties.json inside css parser </cmt> <cmt> this replaces several hard-coded initial values, with use of </cmt> <cmt> property_initial_value(). </cmt> <cmt> libweb: replace hard-coded defaults in node::apply_style() </cmt> <cmt> this now uses the values in initialvalues, which is not ideal, but </cmt> <cmt> it's better to have our defaults defined in two places, than in 3. </cmt> <cmt> the default for border-colors is currentcolor, so we shortcut that </cmt> <cmt> here and just grab the value of the color property. as noted, this is </cmt> <cmt> not perfect, but it's somewhat better. </cmt>","[{'t5': 'implement currentcolor special value'}, {'gold': 'implement the currentcolor css special value, with bonus yaks'}, {'bart': 'implement currentcolor identifier and fix a few bugs'}]"
"<desc> r-api for json dump format that was contributed in #1726 bugfix for #1845 bugfix for #1628 json dump example: data(agaricus.train, package='xgboost') bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"") jdump <- xgb.dump(bst, with_stats = true, dump_format='json') cat(jdump) produces: [ { ""nodeid"": 0, ""depth"": 0, ""split"": 28, ""split_condition"": -9.53674e-007, ""yes"": 1, ""no"": 2, ""missing"": 1, ""gain"": 4000.53, ""cover"": 1628.25, ""children"": [ { ""nodeid"": 1, ""depth"": 1, ""split"": 55, ""split_condition"": -9.53674e-007, ""yes"": 3, ""no"": 4, ""missing"": 3, ""gain"": 1158.21, ""cover"": 924.5, ""children"": [ { ""nodeid"": 3, ""leaf"": 1.71218, ""cover"": 812 }, { ""nodeid"": 4, ""leaf"": -1.70044, ""cover"": 112.5 } ]}, { ""nodeid"": 2, ""depth"": 1, ""split"": 108, ""split_condition"": -9.53674e-007, ""yes"": 5, ""no"": 6, ""missing"": 5, ""gain"": 198.174, ""cover"": 703.75, ""children"": [ { ""nodeid"": 5, ""leaf"": -1.94071, ""cover"": 690.5 }, { ""nodeid"": 6, ""leaf"": 1.85965, ""cover"": 13.25 } ]} ]}, { ""nodeid"": 0, ""depth"": 0, ""split"": 59, ""split_condition"": -9.53674e-007, ""yes"": 1, ""no"": 2, ""missing"": 1, ""gain"": 832.545, ""cover"": 788.852, ""children"": [ { ""nodeid"": 1, ""depth"": 1, ""split"": 28, ""split_condition"": -9.53674e-007, ""yes"": 3, ""no"": 4, ""missing"": 3, ""gain"": 569.725, ""cover"": 768.39, ""children"": [ { ""nodeid"": 3, ""leaf"": 0.784718, ""cover"": 458.937 }, { ""nodeid"": 4, ""leaf"": -0.96853, ""cover"": 309.453 } ]}, { ""nodeid"": 2, ""leaf"": -6.23624, ""cover"": 20.4624 } ]} ] and it could be further fed, e.g., into jsonlite: library(jsonlite) jdump %>% fromjson(simplifydataframe = false) %>% tojson(auto_unbox = true) %>% prettify </desc> <cmt> [r-package] json tree dump interface </cmt> <cmt> [r-package] precision bugfix in xgb.attributes </cmt> <cmt> [r-package] bugfix for cb.early.stop called from xgb.cv </cmt> <cmt> [r-package] a bit more clarity on labels checking in xgb.cv </cmt>","[{'bart': 'json dump format for r-api'}, {'t5': 'json tree dump interface bugfix'}, {'gold': 'json dump format and a couple of bugfixes'}]"
<desc> add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes: #42860 (review) include tests for your changes </desc> <cmt> fix(markdown-it): fix helper parselinklabel argument state type </cmt> <cmt> test(markdown-it): change test due to helper parselinklabel update </cmt> <cmt> chore(markdown-it): correct url for contributors </cmt>,"[{'bart': 'fix helper parselinklabel argument state type'}, {'gold': 'markdown-it helper parselinklabel argument state type'}, {'t5': 'fix parselinklabel argument state type test(markdown-it)'}]"
"<desc> fixes #3726 (""replaced task in chain causes chain to skip to last link""). updates the task.replace() method to copy the replaced task's chain in the correct order. (was copying the chain backwards.) updates integration test of complex chaining to reproduce the issue and pass. </desc> <cmt> add add_replaced test task </cmt> <cmt> make test_complex_chain fail by adding a replaced task </cmt> <cmt> - update expected output </cmt> <cmt> copy replaced task's request chain in reverse </cmt> <cmt> - make t/integration/test_canvas.py::test_chain::test_complex_chain pass </cmt>","[{'bart': ""copy replaced task's chain in reverse""}, {'gold': 'fix #3726 - chaining of replaced tasks'}, {'t5': 'update complex chaining to reproduce the issue and pass'}]"
<desc> add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). bringing the array up to date with the latest library code (v1.5.1): </desc> <cmt> adding investments to the product array </cmt> <cmt> adding investments to the product array in the test as well </cmt>,"[{'t5': 'adding investments to the product array'}, {'bart': 'adding investments to the product array'}, {'gold': 'updating the product list to match the latest library code'}]"
<desc> this pr revises our logic for building cfa graphs for try-catch-finally statements. two changes are implemented by this pr: previously we'd include every cfa node in the try block as a possible antecedent in the exception case. now we only include cfa nodes representing assignments and array mutations. previously we didn't consider the possible effects in the finally block of exceptions in the catch block. we now do. fixes #34797. </desc> <cmt> revise creation of control flow graph for try-catch-finally statements </cmt> <cmt> add tests </cmt> <cmt> accept new baselines </cmt> <iss> throw in catch causes type narrowing in finally block </iss>,"[{'t5': 'revise creation of control flow graph for try-catch-finally statements'}, {'bart': 'revise creation of control flow graph for try-catch-finally statements'}, {'gold': 'fix control flow analysis in try-catch-finally'}]"
"<desc> this pr improves type inference for multiple object literals occurring in the same context. when multiple object literal types contribute to a union type, we now normalize the object literal types such that all properties are present in each constituent of the union type. for example: const obj = test ? { text: ""hello"" } : {};  // { text: string } | { text?: undefined } const s = obj.text;  // string | undefined previously we inferred type {} for obj and the second line subsequently caused an error because obj would appear to have no properties. that obviously wasn't ideal. the key insight behind this pr is that for object literal types we know that unspecified properties always have the value undefined. this is unlike regular object types where unspecified properties might have any value. based on this fact we implement the following new rules: when checking a type relationship between a source type s and a target type t, if t is an object literal type, any excess properties in s are required to have type undefined (normally such excess properties are permitted to have any type). when widening a union type, we normalize all constituent types originating in object literals by adding optional properties of type undefined to each constituent as appropriate such that all constituents have the same set of property names. when inferring multiple object literal types for a type parameter, the object literal types are normalized into a single inferred union type. an example of object literal normalization: // let obj: { a: number, b: number } | //     { a: string, b?: undefined } | //     { a?: undefined, b?: undefined } let obj = [{ a: 1, b: 2 }, { a: ""abc"" }, {}][0]; obj.a;  // string | number | undefined obj.b;  // number | undefined nested object literals are likewise normalized: // let obj: { kind: string, pos: { x: number, y: number, a?: undefined, b?: undefined } } | //     { kind: string, pos: { a: string, x?: undefined, y?: undefined, b?: undefined } | { b: number, x?: undefined, y?: undefined, a?: undefined } } let obj = [{ kind: 'a', pos: { x: 0, y: 0 } }, { kind: 'b', pos: test ? { a: ""x"" } : { b: 0 } }][0]; obj.kind;   // string obj.pos;    // { x: number, y: number, a?: undefined, b?: undefined } | { a: string, x?: undefined, y?: undefined, b?: undefined } | { b: number, x?: undefined, y?: undefined, a?: undefined } obj.pos.x;  // number | undefined obj.pos.y;  // number | undefined obj.pos.a;  // string | undefined obj.pos.b;  // number | undefined multiple object literal type inferences for the same type parameter are collapsed into a single normalized union type: declare function f<t>(...items: t[]): t; // let obj: { a: number, b: number } | //     { a: string, b?: undefined } | //     { a?: undefined, b?: undefined } let obj = f({ a: 1, b: 2 }, { a: ""abc"" }, {}); obj.a;  // string | number | undefined obj.b;  // number | undefined fixes #19236. </desc> <cmt> missing properties in fresh object literals are known to be undefined </cmt> <cmt> normalize object literals in widened union types </cmt> <cmt> normalize nested object literals </cmt> <cmt> use a single union type for all inferred object literal types </cmt> <cmt> accept api changes </cmt> <cmt> accept new baselines </cmt> <cmt> ensure void return in foreachtype </cmt> <cmt> add tests </cmt> <cmt> accept new baselines </cmt> <cmt> add missing semicolon </cmt>","[{'gold': 'improved type inference for object literals'}, {'t5': 'improve type inference for multiple object literals'}, {'bart': 'normalize object literal types in widened union types'}]"
"<desc> todo: remove print button fix/add print button restyle progress bar re-arrange the zoom options to stephen's specs. add back the browse file button or just remove it? add disabled state for buttons? i think we should change it so the outline button is never disabled, instead it should just say in italic ""no outline available"" or something. clean up the error message dialog a little more out there: scroll the thumbnail view while the user scrolls the main pages. determine the page number based on the center of the screen instead of the top. </desc> <cmt> first mockup, loads tracemonkey pages ok </cmt> <cmt> sidebar toggle working </cmt> <cmt> fixing sidebarview scroll bar overflow </cmt> <cmt> text selection ok, switch outline ok </cmt> <cmt> bug fix (works with intelisa) </cmt> <cmt> outline view </cmt> <cmt> disable user select in outline </cmt> <cmt> page number works (not editable yet) </cmt> <cmt> user-changes to pagenumber are working </cmt> <cmt> loadingicon </cmt>","[{'bart': 'todo, progress bar, scroll bar overflow'}, {'t5': 're-arrange progress bar and add disabled state for buttons'}, {'gold': 'new ui - work in progress'}]"
"<desc> a function is added in generator_helpers.h for other wrapped languages. the detached leading comments and leading comments are put together separated by blank lines. the method comments are added to both stubinterface methods and service methods. a test is added, which also illustrated not all things are returned by the protobuf library, namely file level comments are all ignored service trailing comments are taken from one non-blank line below service (methoda1 detached comment) </desc> <cmt> add comments to the generated header file </cmt> <cmt> add a test </cmt>","[{'t5': 'add comments to generated header file'}, {'gold': 'put proto file comments to generated grpc header file.'}, {'bart': 'add detached comments to generated header file'}]"
"<desc> this passes make check on my osx machine. pcwalton should probably review this. </desc> <cmt> add realloc method to rust_kernel </cmt> <cmt> allocate rust_ivec buffers out of the kernel pool </cmt> <cmt> the duplication of upcalls is due to the fact that the runtime is </cmt> <cmt> shared between stage0/rustc and stage1/rustc. once snapshots are </cmt> <cmt> updated, they should be de-duplicated. </cmt>","[{'t5': 'add realloc method to rust_kernel'}, {'gold': 'allocate ivecs out of the kernel pool'}, {'bart': 'add realloc method to rust_kernel'}]"
"<desc> original pull-request #13752 this pull-request is a first step of an automated backporting. it contains changes like after calling a local command git cherry-pick. if you intend to continue backporting this changes, then resolve all conflicts if any. otherwise, if you do not want to backport them, then just close this pull-request. the check results does not matter at this step - you can safely ignore them. also this pull-request will be merged automatically as it reaches the mergeable state, but you always can merge it manually. </desc> <cmt> range check for h3kring </cmt> <cmt> update test </cmt> <cmt> range check for h3kring </cmt>","[{'bart': 'cherry pick #13752 to 20.8: range check for h3kring'}, {'t5': 'cherry pick #13752 for h3kring'}, {'gold': 'cherry pick #13752 to 20.6: range check for h3kring'}]"
"<desc> description: this adds support for the homekit battery service - so battery powered homekit accessories can now report their battery percentage, if they are currently charging and if their battery percentage is low. checklist: local tests pass with tox. your pr cannot be merged unless tests pass if the code does not interact with devices: </desc> <cmt> add simple battery sensor </cmt> <cmt> vary icon based on battery state </cmt> <cmt> add test for battery sensory </cmt> <cmt> add test for battery sensor based on a real device </cmt> <cmt> read other battery related states from accessory </cmt> <cmt> add a device class to the battery sensor </cmt> <cmt> respect the low battery flag from the device </cmt>","[{'gold': 'add support for homekit accessory battery sensors'}, {'t5': 'add support for battery service'}, {'bart': 'add support for homekit battery service'}]"
"<desc> converted our bug template to the new issue forms syntax. this will enable more structured data on incoming bugs, that looks like this: you can try out any of the new templates from this pr here. microsoft reviewers: open in codeflow </desc> <cmt> basic conversion of bug report markdown to yaml </cmt> <cmt> copying a known-working yaml issue template </cmt> <cmt> convert simple bug report to issue templates </cmt> <cmt> syntax cleanup </cmt> <cmt> just trying to get issue templates to work </cmt> <cmt> slowly building back issue template </cmt> <cmt> adding textareas </cmt> <cmt> add issue markdown </cmt> <cmt> add environment commands, remove markdown </cmt> <cmt> refine environment commands </cmt> <cmt> further refine environment prompts, test markdown </cmt> <cmt> uniqueness of issue template </cmt> <cmt> try to bring back markdown with link </cmt> <cmt> add back troublershooting note </cmt> <cmt> fix troubleshooting markdown </cmt> <cmt> embded links in text </cmt> <cmt> remove test yamls </cmt>","[{'gold': 'use issue forms for bug template'}, {'t5': 'convert bug template to new issue forms syntax'}, {'bart': 'convert bug report template to issue forms syntax'}]"
<desc> ref #13326. refactor rewrite-test logic to support one case supports multi database dialects modify rewrite test case </desc> <cmt> support multi database in one rewrite test case </cmt> <cmt> support multi database in one rewrite test case </cmt> <cmt> support multi database in one rewrite test case </cmt> <cmt> fix checkstyle </cmt>,"[{'gold': 'refactor rewrite test logic for one case supports multi database dialects'}, {'bart': 'support multi database dialects in one rewrite test case'}, {'t5': 'refactor rewrite-test logic to support one case'}]"
"<desc> fixes: #21441 </desc> <cmt> homectl: also acquire ""cheap"" passwords for homectl update/passwd </cmt> <cmt> in 57bb9bcba5563c040ee0c41f58e3730a006a8de2 support was added to read </cmt> <cmt> ""cheap"" passwords from env vars and stuff before issuing the first </cmt> <cmt> operation, instead of waiting for it until the first operation failed. </cmt> <cmt> this was added for most verbs of ""homectl"", but two were left out: </cmt> <cmt> update + passwd. add it there too. </cmt> <cmt> homework: fix message typo </cmt> <cmt> homework: don't try to shift uidmap for already activated home areas </cmt> <cmt> when we want to operate on an already activated home area we so far </cmt> <cmt> tried to reapply the uidmapping logic. we shouldn't do that, it's </cmt> <cmt> already applied after all. </cmt> <cmt> we only want to apply this for newly activated home areas. hence check </cmt> <cmt> for the right homesetupflags flag for it home_setup_already_activated. </cmt> <cmt> the patch is actually in theory a two-liner. except that so far we don#t </cmt> <cmt> pass the homesetupflags flags down all necessary functions where the </cmt> <cmt> uidmap stuff will eventually run. hence this larger than intended </cmt> <cmt> commit. </cmt> <cmt> homework: also apply uid shifting when changing passwords/resizing/updating home areas </cmt> <cmt> this adds uidmap shifting also when resizing/updating/changing </cmt> <cmt> passwords. prviously i thought we didn't have to, because the user is </cmt> <cmt> not going to access the uidmap if we only quickly activate the home </cmt> <cmt> area. but this thinking is wrong, because the three operations will </cmt> <cmt> result in an update ~/.identity fie to be written, and we should do that </cmt> <cmt> with uidmap applied, so that its ownership maps down to nobody below as </cmt> <cmt> intended. </cmt> <cmt> fixes: #21441 </cmt> <cmt> homework: fix a bad error propagation </cmt> <cmt> homework: add debug log message whenever we applied a uidmap to a mount </cmt> <iss> spurious fails in test-46-homed </iss>","[{'gold': 'homed uidmap (and other) fixes'}, {'t5': 'add uidmap shifting when resizing/updating home areas'}, {'bart': 'fix a bad error propagation in test-46-homed'}]"
"<desc> carry of pr #20902 allow the docker daemon to run inside a user namespaced parent process.  original patch by @hallyn; i've added a change to revert to ""real"" chroot when inside a userns that came about since the original patch. i have tested this capability inside lxc running an ubuntu:xenial image with a binary built from this pr patchset.  to successfully run the docker daemon i used the following command line: dockerd -d -s vfs --oom-score-adjust=0 inside a user namespace, writing to the oom_score_adj special proc file fails, and i can't get any backend driver to work outside of vfs. i cannot run the docker engine inside of a runc container with user namespaces enabled due to how the /sys/fs/cgroups mount is handled under runc. therefore it is hard to write a test that integrates well with our ci system without requiring a working lxc setup until we solve this problem in runc. </desc> <cmt> don't create devices if in a user namespace </cmt> <cmt> if we are running in a user namespace, don't try to mknod as </cmt> <cmt> it won't be allowed.  libcontainer will bind-mount the host's </cmt> <cmt> devices over files in the container anyway, so it's not needed. </cmt> <cmt> the chrootarchive package does a chroot (without mounting /proc) before </cmt> <cmt> its work, so we cannot check /proc/self/uid_map when we need to.  so </cmt> <cmt> compute it in advance and pass it along with the tar options. </cmt> <cmt> use real chroot if daemon is running in a user namespace </cmt> <cmt> the namespace unshare+pivot root is not possible when running inside a </cmt> <cmt> user namespace, so fallback to the original ""real"" chroot code. </cmt> <cmt> docker-dco-1.1-signed-off-by: phil estes <estesp@linux.vnet.ibm.com> </cmt>","[{'t5': 'allow docker daemon to run inside a user namespace'}, {'bart': 'allow docker daemon to run inside user namespaced parent process'}, {'gold': 'allow engine to run inside a user namespace'}]"
"<desc> from epe-486 and auto-311, i was asked to add testing checkboxes to the pull request template for eosio: this benefits blockchain by encouraging developers to consider test cases while writing pull requests and submitting new contributions. this benefits automation by providing a convenient programmatic way to detect, track, notify, or act upon changes to the ci system or test framework(s), like we do with the other check boxes. more broadly, we all stand to benefit from a culture more focused on testing. the new template has been manually pasted into this pull request so you can see what it looks like, but github will not present the new template to users until it is merged to this repository's default branch: you must create templates on the repository's default branch. templates created in other branches are not available for collaborators to use. see the pull request templates heading on the about issue and pull request templates page of github's documentation for more information. see also pull request 9662 -- eos:develop pull request 9663 -- eos:blockvault pull request 9664 -- eos:develop-boxed pull request 9665 -- eos:release/2.0.x pull request 9666 -- eos:release/1.8.x select one: pull request template. select any that apply: none. none. none. none. </desc> <cmt> add ""testing changes"" section to the pull request template </cmt> <cmt> whitespace </cmt> <cmt> add italic emphasis on selection quantity </cmt> <cmt> colon </cmt>","[{'t5': 'add testing checkboxes to the pull request template'}, {'gold': 'add ""testing changes"" section to pull request template'}, {'bart': 'add ""testing changes"" section to pull request template'}]"
"<desc> created a custom keymap for gmmk pro that includes a working volume knob. my code follows the code style of this project: c, python i have read the pr checklist document and have made the appropriate changes. i have read the contributing document. </desc> <cmt> initial commit </cmt> <cmt> add jackkenney keymap </cmt> <cmt> shift around pgup and del </cmt>","[{'t5': 'add jackkenney keymap shift around pgup and del'}, {'gold': ""jackkenney's keymap for gmmk pro""}, {'bart': 'add custom keymap for gmmk pro'}]"
"<desc> when receiving a header name that is an uncompressed literal, the qpack decoder was using the address of the literal, rather than the literal itself, as the header field name. this pr addresses the issue as well as adding a round-trip test that uses an uncompressed literal. </desc> <cmt> add failing test </cmt> <cmt> deference the buffer, not pointer to the buffer </cmt>","[{'gold': 'fix error in qpack header decoder'}, {'t5': 'decoder qpack decoder uses an uncompressed literal'}, {'bart': 'deference the buffer, not pointer to the buffer'}]"
"<desc> replace #include ""tinyxml2/tinyxml2.h"" with #include ""tinyxml2.h"" in new cocostudio code. this change fix build with cmake when system installed libraries are used (-duse_prebuilt_libs=no). some systems may install tinyxml2 includes without special prefix directory, so findtinyxml2.cmake was written to find include directory that directly contains tinyxml2.h header (without prefix dir). moreover, official install script in tinyxml2 project install header to <prefix>/include/tinyxml2.h also fix some warnings in code. and remove unneeded inclusion of tinyxml2.h from user visible header file (cocos/editor-support/cocostudio/flatbuffersserialize.h), as a result usage of tinyxml in cocos may be ""private"" for user project. </desc> <cmt> replace #include ""tinyxml2/tinyxml2.h"" to #include ""tinyxml2.h"" in new cocostudio code. this should fix build with cmake when use_prebuilt_libs=no. because findtinyxml2.cmake find tinyxml2.h header (without prefix dir). and some systems install tinyxml2 includes without special directory. </cmt> <cmt> also this inclusion style match other existing files such as cocos/platform/ccfileutils.cpp </cmt> <cmt> hide tinyxml2 from user visible header. </cmt> <cmt> fix couple of warnings. make forward declarations to match to real declarations. </cmt>","[{'bart': 'fix build with cmake when system installed libraries are no.'}, {'gold': 'fix usage of tinyxml2 in cocostudio code'}, {'t5': 'fix build with cmake when system installed libraries are used'}]"
"<desc> this pr addresses all the basic setup required to implement capturing child tasks. it was discussed in the simple design doc with @ericl. it implements pg.ready() & pg.bundle_spec calls gcs server to obtain bundle when they are called for the first time. this helps us to avoid having bundles as an argument of class placementgroup. setup placement group id to the worker context. for actors, it is set at the process level. for tasks, it is set at the thread level. get_current_placement_group api to obtain class placemenetgroup where a current task / actor belongs to. #9808 i've run scripts/format.sh to lint the changes in this pr. </desc> <cmt> in progress. </cmt> <cmt> in progers. </cmt> <cmt> done. </cmt>","[{'gold': 'capture child task part 1'}, {'t5': 'implement capturing child tasks'}, {'bart': 'proper setup for capturing child tasks'}]"
"<desc> this adds the ability to enable, disable and toggle the state of the combo feature without having to recompile if want to disable the feature. this makes it useful, if you have modes where combos are actually in the way (such as when gaming). thread on reddit my code follows the code style of this project. i have read the contributing document. </desc> <cmt> add ability to enable/disable combos </cmt> <cmt> update documentation for combo feature </cmt>","[{'t5': 'add ability to enable/disable combos'}, {'gold': 'allow combo feature to be enabled/disabled live'}, {'bart': 'add ability to enable/disable combos'}]"
"<desc> the following has always been an error because we require a common supertype to exist among the candidate inferences for a particular type parameter: declare function choose<t>(x: t, y: t): t; let a = choose(10, ""abc"");  // error, type '""abc""' not assignable to type '10' however, because we currently infer union types when instantiating a generic function type in the context of a non-generic function type, we don't report an error on the following: declare function foo<t>(cb: (x: number, y: string) => t, x: t, y: t): t; let b = foo(choose, ""abc"", 10);  // not an error, but should be with this pr we stop inferring union types in cases such as the above. this is a breaking change. all errors uncovered in the test baselines seem reasonable, but we'll have to see what results from the rwc tests. worst case we can tighten the rules only in --strictfunctiontypes mode. fixes #16107. </desc> <cmt> stop inferring unions for disjoint callback parameter inferences </cmt> <cmt> update tests </cmt> <cmt> accept new baselines </cmt>","[{'gold': ""don't infer unions for disjoint callback parameter candidates""}, {'bart': 'stop inferring unions for disjoint callback parameter inferences'}, {'t5': 'stop inferring unions for disjoint callback parameter inferences'}]"
"<desc> the onnx page is currently broken due to some name changes. the api reference is blank:  i fixed the overview table to link to things and now have the api reference appearing. i also updated the description text. sphinx won't render any shortcut references to the functions, so i'm calling them out the long way. when the python config for these onnx modules are updated we can try out the shorthand references and see if sphinx likes it or not. there are lint issues showing up in the docs build logs from these onnx files as well as many other files. i'll create a separate issues for these comments. </desc> <cmt> update onnx api references </cmt> <cmt> update descriptions </cmt>","[{'bart': 'update onnx api references'}, {'gold': 'update onnx api docs references'}, {'t5': 'update onnx api references'}]"
"<desc> this pr fixes a bug when wav2vec2 is trained with batch_size=1 did you read the contributor guideline, was this discussed/approved via a github issue or the forum? please add a link documentation guidelines, and here are tips on formatting docstrings. </desc> <cmt> correct long to bool </cmt> <cmt> up </cmt>","[{'bart': 'correct long to bool in wav2vec2'}, {'gold': 'make sure tensors are always bool for mask_indices'}, {'t5': 'fix a bug when wav2vec2 is trained with batch_size=1'}]"
"<desc> fix pojoutil realize type convert not support subclasses of 'java.util.date' #2499 the type convert was modified to support the 'java.util.date' subclass org.apache.dubbo.common.utils.compatibletypeutils.java org.apache.dubbo.common.utils.pojoutilstest.java org.apache.dubbo.common.utils.compatibletypeutilstest.java follow this checklist to help us incorporate your contribution quickly and easily: make sure there is a github_issue filed for the change (usually before you start working on it). trivial changes like typos do not require a github issue. your pull request should address just this issue, without pulling in other changes - one pr resolves one issue. format the pull request title like [dubbo-xxx] fix unknownexception when host config not exist #xxx. each commit in the pull request should have a meaningful subject line and body. write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. if the new feature or significant change is committed, please remember to add integration-test in test module. run mvn clean install -dskiptests & mvn clean test-compile failsafe:integration-test to make sure unit-test and integration-test pass. if this contribution is large, please follow the software donation guide. </desc> <cmt> solve time, timestamp, sql. date type conversion problems </cmt> <cmt> add ut </cmt>","[{'bart': ""fix pojoutil realize type convert not support subclasses of 'java.util.date' #2499""}, {'gold': ""[dubbo-2499]fix pojoutil realize type convert not support subclasses of 'java.util.date' #2499""}, {'t5': 'fix date type conversion problems'}]"
"<desc> while further investigating this as requested, i found some single_file bugs that impacted html output and workers. specifically: single_file with html output would fail to compile, due to embedding the wasm in the js and deleting it, then afterwards trying to embed the deleted wasm in the html. in the case of both html and workers, multiple files would be produced/required (respectively, test.html + test.js and test.js + test.worker.js). most of the lines changed in emcc.py are just indentation, so this will be easier to view with ?w=1. </desc> <cmt> single_file html output fix </cmt> <cmt> single_file worker js output fix </cmt>","[{'t5': 'single_file html output and workers'}, {'gold': 'single_file html and worker fixes + tests'}, {'bart': 'single_file html output and worker js output fix'}]"
"<desc> fixes #267 the calculator currently only accepts exponential numbers like 2323e+12 and 23241e-12. the calculator should also accept 2323e12 or 334.232e12 in the scientific mode. modify the regex used to check exponentials modify onpaste(string^ pastedstring, viewmode mode) to accept exponentials without signs. add unit tests unit tests + manual testing in english, french and spanish. before/after </desc> <cmt> add exponential without sign support </cmt> <cmt> add unit tests </cmt> <cmt> fix formatting </cmt> <cmt> remove extra spaces </cmt> <iss> the calculator should accept exponential numbers without sign in scientific mode </iss>","[{'gold': 'accept exponential numbers without -/+ sign.'}, {'bart': 'add exponential without sign support to calculator'}, {'t5': 'add exponential without sign support'}]"
"<desc> c++ worker will generate a template project, we need to ignore the generated files by c++ worker. i've run scripts/format.sh to lint the changes in this pr. </desc> <cmt> linkopts shared </cmt> <cmt> ignore generated files </cmt>","[{'t5': 'ignore generated files by c++ worker'}, {'gold': '[c++ worker]ignore genrated files'}, {'bart': 'ignore generated files by c++ worker'}]"
"<desc> original pull-request #33062 this pull-request is a first step of an automated backporting. it contains changes like after calling a local command git cherry-pick. if you intend to continue backporting this changes, then resolve all conflicts if any. otherwise, if you do not want to backport them, then just close this pull-request. the check results does not matter at this step - you can safely ignore them. also this pull-request will be merged automatically as it reaches the mergeable state, but you always can merge it manually. </desc> <cmt> fix issue #80: union index out of boundary </cmt> <cmt> addressing review comments </cmt> <cmt> remove the additional white space as per the pipeline build error. </cmt> <cmt> adapt test </cmt> <cmt> whitespaces </cmt> <cmt> merge #33022 </cmt>","[{'bart': 'cherry pick #33062 to 21.8: merge #33022'}, {'t5': 'cherry pick #33062 to refactor'}, {'gold': 'cherry pick #33062 to 21.11: merge #33022'}]"
"<desc> issue raised in dockerode repo: apocas/dockerode#464 when using the run command, to split the stdout and stderr, an array of streams should be passed in as the 3rd parameter of the run command. optionally you can pass in a single stream as well. </desc> <cmt> add array of streams option to run command. </cmt> <cmt> re-add import back in. </cmt>","[{'t5': 'add array of streams option to run command'}, {'gold': 'dockerode - allow passing in array of streams to run command.'}, {'bart': 'add array of streams option to run command.'}]"
"<desc> add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes:  increase the version number in the header if appropriate. if you are making substantial changes, consider adding a tslint.json containing { ""extends"": ""dtslint/dt.json"" }. not adding any substantial changes </desc> <cmt> addcustomattribute takes a string or a number </cmt> <cmt> added brooks patton to contributors for new relic </cmt> <cmt> bumped minor version </cmt>","[{'bart': 'added brooks patton to contributors for new relic'}, {'t5': 'addcustomattribute add brooks patton to contributors'}, {'gold': 'newrelic functions addcustomattribute and addcustomattributes takes strings and numbers'}]"
<desc> fixes #21715 i have followed (at least) the pr section of the contributing guide. description small fix of ripple color for custom switches. </desc> <cmt> fixed ripple color for custom switch </cmt> <cmt> prettier import </cmt> <iss> [switch] wrong custom ripple color </iss>,"[{'t5': 'fix ripple color for custom switches'}, {'bart': 'fix ripple color for custom switches'}, {'gold': 'fix custom switch ripple color'}]"
"<desc> module.instantiatewasm is a callback the user provides, and then the user is in change of fetching and instantiating the wasm. in that code path emscripten never sees the wasm binary, which means we cannot create a wasmoffsetconverter. with this pr we will not hang on startup, and we will still detect problems, but the sanitizer's own stack traces will mark function names as ""unknown"". that will limit the santizer's usefulness, but they do still detect errors, and the browser's own stack traces may be enough to diagnose things. fixes #13424 </desc> <cmt> fix #13424 </cmt> <cmt> typo </cmt> <iss> offset-converter and caller-provided instantiatewasm hooks </iss>","[{'t5': 'fix offset-converter and caller-provided instantiatewasm hooks'}, {'gold': 'avoid using wasmoffsetconverter when module.instantiatewasm'}, {'bart': 'fix wasmoffsetconverter and caller-provided instantiatewasm hooks'}]"
<desc> combine prs #10200 #10206 #10209 #10212 #10215 #10217 to 2.1 minor edits to the reference of various cleos commands select one: select any that apply: </desc> <cmt> applied new command reference template </cmt> <cmt> applied revised reference template </cmt> <cmt> applied command ref template </cmt> <cmt> applied new reference template </cmt> <cmt> applied reference template </cmt> <cmt> applied reference template </cmt> <cmt> fix broken link and other edits on cleos create account ref :doc </cmt> <cmt> minor edits on cleos create key ref :doc </cmt> <cmt> minor edits on cleos create account ref :doc </cmt> <cmt> minor edits on cleos get transaction ref :doc </cmt> <cmt> minor edits on cleos wallet import ref :doc </cmt> <cmt> minor edits on cleos wallet keys ref :doc </cmt> <cmt> minor edits on cleos net connect ref :doc </cmt> <cmt> minor edits on cleos net disconnect ref :doc </cmt> <cmt> minor edits on cleos net peers ref :doc </cmt> <cmt> minor edits on cleos net status ref :doc </cmt>,"[{'t5': 'minor edits to the reference of various cleos commands'}, {'gold': 'update reference for various cleos commands - 2.1'}, {'bart': 'minor edits to cleos 2.1'}]"
"<desc> added the time_series_metric mapping parameter to the unsigned_long and scaled_float field types added the time_series_dimension mapping parameter to the unsigned_long field type fixes #78100 relates to #76766,  #74450 and #74014 </desc> <cmt> added time_series mapping params to unsigned_long </cmt> <cmt> added time_series mapping params to scaled_float </cmt> <iss> can't use `time_series_metric` mapping parameter with `scaled_float` or `unsigned_long` fields </iss>","[{'t5': 'added time_series mapping parameter to unsigned_long and scaled_float'}, {'bart': 'added time_series_metric mapping parameter to the unsigned_long and scaled_float field types'}, {'gold': 'add time series params to unsigned_long and scaled_float'}]"
"<desc> this pr fixes the mouse events (enter, hover exit) so that the event objects contain correct localpositions. related issues fixes #33675 no tests are added. existing tests are added so that they also test local positions. before you create this pr confirm that it meets all requirements listed below by checking the relevant checkboxes ([x]). this will ensure a smooth and quick review process. i read the contributor guide and followed the process outlined there for submitting prs. i signed the cla. i read and followed the flutter style guide, including features we expect every widget to implement. i read the tree hygiene wiki page, which explains my responsibilities. i updated/added relevant documentation (doc comments with ///). the analyzer (flutter analyze --flutter-repo) does not report any problems on my pr. i am willing to follow-up on review comments in a timely manner. did any tests fail when you ran them? please read handling breaking changes. no, no existing tests failed, so this is not a breaking change. </desc> <cmt> new api </cmt> <cmt> add tests </cmt> <cmt> add tests for mouse region </cmt> <iss> transform mouse events to the local coordinate system </iss>","[{'t5': 'add tests for mouse region'}, {'bart': 'fix mouse events to contain correct localpositions'}, {'gold': 'mouse events report correct local positions'}]"
"<desc> just like in #9760, we can't actually use the uwp file picker api, because it will absolutely not work at all when the terminal is running elevated. that would prevent the picker from appearing at all. so instead, we'll just use the shell32 one manually. this also gets rid of the confirmation dialog, since the team felt we didn't really need that. we could maybe replace it with a toast (#8592), but meh closes #11356 closes #11358 this is a lot like #9760 introduced in #11062 megathread: #9700 </desc> <cmt> allows the dialog to be opened when elevated. moves some helpers around </cmt> <cmt> make it act like a .txt export, in downloads </cmt> <cmt> comments </cmt> <iss> [1.12] exporting text fails when running elevated (presumably we can't open the file picker elevated) </iss> <iss> [1.12] we can probably just ditch the confirmation dialog when exporting text </iss>","[{'gold': 'replace the uwp file export with the shell32 one'}, {'bart': 'allow file picker to be opened when running elevated'}, {'t5': 'allow the file picker to be opened when elevated'}]"
"<desc> the second part in a series of prs for adding annotation to np.core.multiarray. the improvements introduced by this pr fall in one of the following two categories: the addition of literal int-values for constants such as np.may_share_exact. the addition of dtype-support to the array constuctors that were recently moved from _asarray to multiarray (xref #18642). examples from typing import type_checking import numpy as np if type_checking: # note: revealed type is 'literal[0]' reveal_type(np.may_share_bounds) # note: revealed type is 'numpy.ndarray[any, numpy.dtype[numpy.floating*[numpy.typing._64bit*]]]' reveal_type(np.asarray(1, dtype=np.float64)) </desc> <cmt> maint: move 9 constants from np to np.core.multiarray </cmt> <cmt> maint: move 4 array constructors from np.core._asarray to np.core.multiarray </cmt> <cmt> enh: use literals for the constants when possible </cmt> <cmt> enh: add basic dtype-support to 4 array constructors </cmt> <cmt> enh: allow array and empty_like to pass through subclasses if dtype=none </cmt> <cmt> tst: update the typing tests for np.core.multiarray </cmt>","[{'t5': 'add basic dtype-support to array constructors'}, {'bart': 'update the typing tests for np.core.multiarray'}, {'gold': 'add annotations to np.core.multiarray part 2/4'}]"
"<desc> fixes #5638 i have added tests for the newly introduced function to check for file and also the default icon src config (with a snapshot test). i was also thinking about testing the promise.reject behavior of onpostbuild, but i got stuck because i don't know if mocking the fs would be a good idea, or should i just leave the fs as is and let it generate files in public directory (which is ignored by git anyway). please suggest. \ </desc> <cmt> throw error if icon does not exist for manifest </cmt> <cmt> gatsby-plugin-manifest will throw an error if the icon defined in </cmt> <cmt> gatsby-config.js does not exist. if it does exist, then console.log </cmt> <cmt> a better message about what is being done. </cmt> <cmt> see gatsbyjs/gatsby#5638 </cmt> <cmt> add tests for gatsby-plugin-manifest </cmt> <cmt> the tests ensure the default icon src configs and behavior of the </cmt> <cmt> newly introduced check for detecting the presense of icon src </cmt> <cmt> mentioned in the gatsby-config.js file. </cmt> <cmt> see gatsbyjs/gatsby#5638 </cmt>","[{'t5': 'fix gatsby-config.js and gatsby#5638'}, {'bart': 'add tests for gatsby-plugin-manifest (fixes #5638)'}, {'gold': 'fix gatsby-plugin-manifest cryptic error if file is not present'}]"
<desc> add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes: < increase the version number in the header if appropriate. this pr relates to this error: </desc> <cmt> added fn type for order </cmt> <cmt> added tests for order with order </cmt> <cmt> updated tests to use s. </cmt> <cmt> increased the version number in the header </cmt>,"[{'t5': 'added fn type for order with order'}, {'bart': 'added fn type for order with order'}, {'gold': 'updated ""sequelize typings"" to be able to use fn in ""order"" options'}]"
"<desc> closes #22875 tests added / passed passes git diff upstream/master -u -- ""*.py"" | flake8 --diff whatsnew entry this is a resubmit of a previous pr i submitted that was approved (#22916). i tried to close and reopen to get a rebuild on travis but i couldn't reopen it because i had deleted my old fork (after accidentally pushing to master). </desc> <cmt> cln gh22785 replace bare excepts by explicit excepts in pandas/io/ </cmt> <cmt> cln gh22875 modify previous commit so flake8 passes </cmt> <cmt> cln gh22875 fix pandas/io/packers.py </cmt> <cmt> cln gh22875 fix other except in pandas/io/packers.py </cmt> <cmt> cln gh22875 incorporated feedback from tests </cmt> <cmt> cln gh22875 delete unnecessary comments and incorporate test feedback </cmt> <iss> replace bare excepts by explicit excepts in pandas/io/ </iss>","[{'bart': 'fix bare excepts by explicit excepts in pandas/io/'}, {'gold': 'cln gh22875 replace bare excepts by explicit excepts in pandas/io/'}, {'t5': 'fix bare excepts by explicit excepts in pandas/io/'}]"
"<desc> i have read freecodecamp's contribution guidelines. my pull request has a descriptive title (not a vague title like update index.md) my pull request targets the master branch of freecodecamp. none of my changes are plagiarized from another source without proper attribution. my article does not contain shortened urls or affiliate links. fixes issue #17836 @scissorsneedfoodtoo , #19720 </desc> <cmt> update adjust-the-background-color-property-of-text.english.md </cmt> <cmt> update adjust-the-background-color-property-of-text.english.md </cmt> <cmt> update adjust-the-background-color-property-of-text.english.md </cmt>","[{'gold': 'fixes issue with background-color and background being interpreted differently'}, {'bart': 'fix issue #17836 @scissorsneedfoodtoo, #19720'}, {'t5': 'update index.md to english.md'}]"
"<desc> add mbedtls lib support support custom openssl, sodium and mbedtls crypto lib path update libsodium to 1.0.12 in tests add libopenssl 1.1 to tests add mbedtls to tests add more ciphers to jenkins update config.json.example </desc> <cmt> add mbedtls crypto wrapper. </cmt> <cmt> add tests files for new aead ciphers </cmt> <cmt> add custom lib path support </cmt> <cmt> fix some typo </cmt> <cmt> fix forbidden ip list </cmt> <cmt> rm crypto lib build files </cmt> <cmt> remove crypto source </cmt> <cmt> add xchacha20 test config </cmt>","[{'bart': 'add mbedtls lib support and ciphers'}, {'t5': 'add mbedtls lib support to tests'}, {'gold': 'add mbedtls wrapper, custom crypto lib path, test files'}]"
"<desc> in #19910, it was pointed out that raising an exception from a future callback would cause the channel spin thread to terminate. if there are outstanding events on the channel, this will cause calls to channel.close() to block indefinitely. this commit ensures that the channel spin thread does not die. instead, exceptions will be logged at error level. this pr fixes #19910. </desc> <cmt> gracefully handle errors from callbacks. </cmt> <cmt> in </cmt> <cmt> raising an exception from a future callback would cause the channel spin </cmt> <cmt> thread to terminate. if there are outstanding events on the channel, </cmt> <cmt> this will cause calls to channel.close() to block indefinitely. </cmt> <cmt> this commit ensures that the channel spin thread does not die. instead, </cmt> <cmt> exceptions will be logged at error level. </cmt> <cmt> remove todo </cmt> <cmt> remove line of dead code </cmt> <iss> python channel close can deadlock when keepalive timeout happens </iss>","[{'gold': 'gracefully handle errors from future object callbacks.'}, {'t5': 'gracefully handle errors from callbacks'}, {'bart': 'gracefully handle errors from callbacks.'}]"
"<desc> this is the last pr in the cable testing series (at least for now ): added channel_test generator added connection_test to app generator (unless --skip-action-cable) added ""action cable testing"" guides to ""testing"" guides added ""action cable testing"" as a highlight to 6.0 release notes (finally) added changelog entry. / </desc> <cmt> add channel test generator </cmt> <cmt> add connection_test to app generator </cmt>","[{'gold': 'add action cable testing guides and generators'}, {'bart': 'add channel_test generator and connection_test to app generator'}, {'t5': 'add channel test generator to app generator'}]"
<desc> catch exceptions won't work with nested workflow. this pr fixed this. closes #18144 i've run scripts/format.sh to lint the changes in this pr. </desc> <cmt> up </cmt> <cmt> up </cmt> <cmt> format </cmt> <iss> nested workflow with catch exceptions failed </iss>,"[{'bart': 'nested workflow with catch exceptions failed'}, {'t5': 'up format nested workflow with catch exceptions'}, {'gold': 'fix nested workflow with catch exception bug'}]"
"<desc> they (security measures) are good in general, however there are some (valid) usages that require turning these off. gui screenshot webui screenshot </desc> <cmt> update options dialog layout in webui </cmt> <cmt> add option to control webui clickjacking protection </cmt> <cmt> some users actually want embedding webui into their custom build iframe. </cmt> <cmt> closes #7370. </cmt>","[{'bart': 'add option to disable webui clickjacking protection'}, {'gold': 'add options to control webui security measures'}, {'t5': 'add option to control webui clickjacking protection'}]"
"<desc> with this pr we narrow the string and number types as appropriate when they are compared with values of literal types. function move(direction: ""up"" | ""down"") { // ... } function do1(command: string) { if (command === ""up"" || command === ""down"") { move(command);  // narrowed to type ""up"" | ""down"" } } function do2(command: string) { switch (command) { case ""up"": case ""down"": move(command);  // narrowed to type ""up"" | ""down"" break; } } function f1(x: number, y: 1 | 2) { if (x === 0 || x === y) { x;  // narrowed to type 0 | 1 | 2 } } function f2(x: number | ""foo"" | ""bar"", y: 1 | 2 | string) { if (x === y) { x;  // narrowed to type ""foo"" | ""bar"" | 1 | 2 y;  // narrowed to type ""foo"" | ""bar"" | 1 | 2 } } interestingly this found a bug in our scanner, pointing out that type 2 is not comparable to type 8. fixes #7447. fixes #10417. fixes #11306. </desc> <cmt> narrow string and number types in equality checks and switch cases </cmt> <cmt> fix bug in scanner </cmt> <cmt> properly narrow union types containing string and number </cmt> <cmt> accept new baselines </cmt> <cmt> add tests </cmt>","[{'t5': 'narrow string and number types in equality checks and switch cases'}, {'gold': 'narrow string and number types in literal equality checks'}, {'bart': 'correctly narrow string and number types when comparing with literal types'}]"
"<desc> this pr is mainly to fix the conhost.exe not using the application manifest correctly and the operating system version cannot be detected correctly. related documents can be viewed #2053. this update also brings support for longpath to conhost.exe. closes #2053 cla signed. if not, go over here and sign the cla requires documentation to be updated when directwrite rendering is turned on with usedx, this application cannot display emoji on windows 10 before applying this pr. after applying this pr, it can be displayed normally. </desc> <cmt> fix conhost detect os version </cmt> <cmt> fix conhost.exe.manifest </cmt> <iss> usedx option no longer works in conhost </iss>","[{'gold': 'fix conhost.exe detect os version'}, {'bart': 'fix conhost.exe not using application manifest correctly and operating system version cannot be detected correctly'}, {'t5': 'fix conhost.exe.manifest usedx option no longer works in conhost.exe'}]"
"<desc> this is a backport of #12257 and #12279 to swift-4.0-branch to more-accurately gather stats there (in particular: dodge a data-loss issue when writing stats files to deeply-nested directories). rdar://34818636 </desc> <cmt> [stats] fix typo. </cmt> <cmt> [stats] only use input filename, not mangled path, in stats file name. </cmt> <cmt> this was causing cases of very long input pathnames to be mangled into </cmt> <cmt> stats filenames greater than 255 characters long, which in turn meant </cmt> <cmt> stats files were not being written in some cases. </cmt> <cmt> [stats] add a test for long input-path bug (0e5b982d) </cmt>","[{'t5': 'backport of rdar://34818636 [stats] to swift-4.0-branch'}, {'gold': 'rdar 34818636 backport pr 12257 stats output dir filename issues to swift 4.0 branch'}, {'bart': 'backport swift-4.0-branch to more robustly gather stats'}]"
<desc> override files. move esp32 env in extra file platformio_tasmota_env32.ini the pull request is done against the latest dev branch only one feature/fix was added per pr. the code change is tested and works on core tasmota_core_stage and esp32 the code change pass travis tests. your pr cannot be merged unless tests pass i accept the cla. </desc> <cmt> delete platformio_override_esp32.ini </cmt> <cmt> update platformio.ini </cmt> <cmt> add files via upload </cmt> <cmt> update platformio_override_sample.ini </cmt>,"[{'bart': 'move esp32 env in extra file platformio_tasmota_env32'}, {'t5': 'override files and add a new file'}, {'gold': 'fix esp32 build env in platformio and merge'}]"
"<desc> if a function always returns ok(something), we can return something directly and remove the corresponding error handling in the callers. clippy::unnecessary_wraps </desc> <cmt> remove unneccessary wrapping of return value of allow_unstable(), it would always return some(thing) </cmt> <cmt> rustc_parse: remove unneccessary wrapping of return value in fn mk_range() which would always return ok(..) </cmt> <cmt> remove unneccessary wrapping of return value in mk_await_expr() </cmt> <cmt> parser: remove unneccessary wrapping of return value in parse_extern() </cmt> <cmt> remove redundant return value ok(()) of clear_relocations() </cmt> <cmt> rustc_codegen_ssa: remove unneeded wrapping of return type of execute_copy_from_cache_work_item (always returns ok(..)) </cmt> <cmt> rustc_mir: remove redundant wrapping of return type in numeric_intrinsic() </cmt>","[{'gold': 'remove redundant option/result wrapping of return values'}, {'t5': 'remove redundant wrapping of return type in numeric_intrinsic()'}, {'bart': 'remove unneeded wrapping of return value in some callers'}]"
"<desc> similar to #65353 (which this pr should've been a part of), however in this case we didn't previously nest the tables when processing trait paths in impl block declarations. closes #65411 </desc> <cmt> save-analysis: nest tables when processing impl items </cmt> <cmt> save-analysis: add a relevant test case </cmt> <iss> -z save-analysis ice when processing impl under an fn item </iss>","[{'t5': 'nest tables when processing impl items'}, {'gold': 'nest tables when processing impl block definitions'}, {'bart': 'nost tables when processing trait paths in impl block declarations'}]"
"<desc> this is a public helper method in an api that plugin authors are encouraged to use, so we need to deprecate the method name in 6.x and only remove it in master. </desc> <cmt> correct typo in analysisplugin#requriesanalysissettings </cmt> <cmt> because this is a static method on a public api, and one that we encourage </cmt> <cmt> plugin authors to use, the method with the typo is deprecated in 6.x </cmt> <cmt> rather than just renamed. </cmt> <cmt> migration docs </cmt>","[{'bart': 'correct typo in analysisplugin#requriesanalysissettings'}, {'gold': 'correct spelling of analysisplugin#requriesanalysissettings'}, {'t5': 'correct typo in analysisplugin#requriesanalysissettings'}]"
"<desc> let's not release stuff with known java incompatiblities, e.g. we know will break in java 9, and could technically even break going forwards in java 8, e.g. calling  this is a backport of all bugfixes so that 2.1 won't have compatibility issues. </desc> <cmt> add java 9 support for bootclasspath to jvminfo (it throws uoe otherwise which is not properly handled) </cmt> <cmt> update to forbidden-apis 2.0 </cmt> <cmt> disable mockfilesystems in 2.1, as they do broken reflection incompatible with java 9 </cmt> <cmt> fix mvn verify under jigsaw </cmt> <cmt> get our stats back by reflecting mxbeans correctly </cmt> <cmt> backport removal of illegal test </cmt> <cmt> remove unnecessary permissions that are not possible in java 9 </cmt> <cmt> make logger final so its not detected as a static leak </cmt> <cmt> suppressfilesystems in this straggler </cmt>","[{'gold': 'fix mvn verify on jigsaw with 2.1'}, {'t5': 'backport java 9 bugfixes'}, {'bart': 'backport java 9 compatibility fixes to 2.1'}]"
<desc> improves logging overall. </desc> <cmt> shader_bytecode: add encoding for vote.vtg </cmt> <cmt> shader_ir: add error message for exit.fcsm_tr </cmt> <cmt> shader_bytecode: add encoding for bar </cmt> <cmt> shader_bytecode: rename mov_sys to s2r </cmt> <cmt> shader/other: add error message for some s2r registers </cmt>,"[{'bart': 'add encoding for some s2r registers'}, {'t5': 'add encoding for s2r'}, {'gold': 'add some instruction and s2r encodings'}]"
"<desc> the updated scripts need new binding generators. on windows use .bat linux and mac use .sh </desc> <cmt> issue #3781, update genbinding script to fit new bindings-generator. </cmt> <cmt> issue #3781: fix the variable name. </cmt> <cmt> issue #3781, add windows bat script. </cmt> <cmt> issue #3781, js not generate cocos2dx physics now. </cmt> <cmt> issue #3781, undefine the __mingw32__ macro to fix the script error on windows </cmt>","[{'t5': 'fix the script error on windows'}, {'bart': 'issue #3781, update genbinding script to fit new bindings-generator.'}, {'gold': 'issue#3781 update script for each platform bindings generating.'}]"
"<desc> i have added the following new language in the process for starting a new translation section. doc page :-  gujarati french mongolian </desc> <cmt> add gujarati, french, mongolian langulage to new transalation list </cmt>","[{'bart': 'add gujarati, french, mongolian to new translation section'}, {'t5': 'add gujarati, french, mongolian langulage to new transalation list'}, {'gold': 'add new language in transalation list'}]"
"<desc> the older algorithm was pretty inefficient for big matches. fixes #29227. (on my computer, mir construction on this test case goes from 9.9s to 0.025s.) whereas before we had a loop like: for all outcomes of the test we are performing for all candidates check whether candidate is relevant to outcome we now do: for all candidates determine which outcomes the candidate is relevant to since the number of outcomes in this case is proportional to the number of candidates, the original algorithm turned out to be o(n^2), and the newer one is just o(n). this pr also does some minor speedups by eagerly mirroring all patterns, so that we can just pass around &pattern<'tcx>, which makes cloning cheaper. we could probably go a bit further in this direction. r? @aatch </desc> <cmt> remove the mirroring for patterns and just convert them eagerly; then, </cmt> <cmt> pass around references instead of boxed values to save on clone costs. </cmt> <cmt> clone the candidates and match-pairs lazilly, instead of eagerly. </cmt> <cmt> reorganize match construction to be o(n) instead of o(n^2). whereas </cmt> <cmt> before we iterated over the test and each outcome thereof, and then </cmt> <cmt> checked processed every candidate against this outcome, we now organize </cmt> <cmt> the walk differently. instead, we visit each candidate and say ""here is </cmt> <cmt> the test being performed. figure out the resulting candidates for each </cmt> <cmt> possible outcome and add yourself into the appropriate places."" </cmt> <cmt> add regression test for #29227. </cmt>","[{'t5': 'fix regression test for #29227'}, {'bart': 'reorganize match construction to be o(n^2)'}, {'gold': 'change match desugaring in mir to be o(n) instead of o(n^2)'}]"
<desc> this ensures spr pages with a . in the name end with .html instead of treating it as a custom extension </desc> <cmt> make sure to handle paths with dot in name for spr </cmt>,"[{'gold': 'fix spr handling with dot in name'}, {'t5': 'ensure spr pages with a. in the name end with.html instead of treating it as a custom extension'}, {'bart': 'make sure to handle paths with dot in name for spr'}]"
"<desc> git gymnastics after #8626 </desc> <cmt> revert ""introduce an 'svc' segment for dns search"" </cmt> <cmt> install specific salt version on aws, based on gce </cmt> <cmt> the latest salt version breaks the container_bridge.py _state function </cmt> <cmt> we can lock to the same version as gce.  this is not a full fix, </cmt> <cmt> because we can't update to the latest salt without breaking gce, </cmt> <cmt> but this at least unbreaks and sync aws with gce. </cmt> <cmt> this isn't a straight copy from gce, because we still use </cmt> <cmt> the salt master on aws (for now) </cmt> <cmt> fixes #8114 </cmt> <cmt> aws: don't use policy-rc.d to prevent starting daemons until we're ready </cmt> <cmt> it isn't required </cmt> <cmt> kubernetes version v0.17.1 </cmt> <cmt> kubernetes version v0.17.1-dev </cmt> <cmt> release 0.17.1 </cmt>","[{'t5': 'fix salt master on aws'}, {'gold': 'merge release 0.17.1 to master'}, {'bart': 'install specific salt version on aws'}]"
"<desc> fixes #6311. this is an alternative approach to #6328. offline discussions have determined that there was not enough review around the idea of type predicates on accessors and properties. this moves them back to signatures, keeps this-based predicates, and continues to infer from type predicates. @mhegazy </desc> <cmt> add test </cmt> <cmt> move type predicates back onto signatures, remove narrowing for property/get type guards. </cmt> <cmt> error on nodes which should not have type predicates. </cmt> <cmt> minor rename. </cmt> <cmt> use names of accessors instead of their entire spans. </cmt> <cmt> added tests. </cmt> <cmt> actually, it makes more sense to error on the predicate annotation than anything else. </cmt> <cmt> removed trailing whitespace for linter. </cmt> <cmt> fixed up fourslash tests to only test functions. </cmt> <cmt> accepted baselines. </cmt>","[{'t5': 'move type predicates back onto signatures'}, {'bart': 'move type predicates back to signatures'}, {'gold': 'remove notion of predicates as types, move predicates back to signatures'}]"
<desc> this pr will add a new utm info module which allows the management of network interface address entries of the sophos utm. this module integrates with the existing utm_utils . new module pull request module/web_infrastructure/sophos_utm/utm_network_interface_address.py module/web_infrastructure/sophos_utm/utm_network_interface_address_info.py </desc> <cmt> - initial commit </cmt> <cmt> - fix sanity checks </cmt> <cmt> - fixed documentation trailing whitespaces </cmt> <cmt> - changed author github contact as he has no account i'll (@steamx) take responsibility </cmt>,"[{'bart': 'add utm info module for sophos utm'}, {'gold': 'added ansible utm info module for network interface address entities.'}, {'t5': 'add new utm info module for sophos utm'}]"
"<desc> context we need to support multiple pages and layouts in the app. this pr enables us to have routing, pages, and layouts. it adds a basic sidebar navigation component. closes unify-308 naive navbar ui note currently, the schema stitching @tgriesser added is preventing the component tests from compiling. features and bonuses we have a router, with url-based navigation + back/forward support we have layouts and pages. pages can have metadata (like a human-readable name) declared in <route> blocks we have a 404 page :-) new ui sidebarnavigation sidebarnavigationrow how to test yarn dev --project packages/launchpad from the workspace root launch a browser navigate to the /vite/ app path see the router, layouts, etc and click through them to see the pages change </desc> <cmt> feat: adding navigation to the frontend app </cmt> <cmt> cleaning up markup </cmt> <cmt> adding layout and navigation and pages </cmt> <cmt> setimmediate fix </cmt>","[{'t5': 'adding navigation to the frontend app'}, {'bart': 'adding navigation to the frontend app'}, {'gold': 'adding navigation, pages, router, and layout'}]"
"<desc> two commits: don't allow slow timer callbacks to block script event handling (including quit). timers added from idle observers could fire long after they're due. more details and example at the commit messages. </desc> <cmt> lua: timers: don't block forever with slow callbacks </cmt> <cmt> previously, process_timers() kept going as long as there were due </cmt> <cmt> timers, which could be for extended periods of time or even forever </cmt> <cmt> if there were slow timer callbacks with either periodic timers or if </cmt> <cmt> timers were added repeatedly. </cmt> <cmt> this prevented dequeuing mpv events, and subsequently, among others, </cmt> <cmt> prevented mpv from quitting until process_timers() completed. </cmt> <cmt> for instance, this caused process_timers() to never return: </cmt> <cmt> function render() <longer than 1/60 s on a slow system> end </cmt> <cmt> mp.add_periodic_timer(1/60, render) </cmt> <cmt> similarly, it never returned if a timer callback always added a new </cmt> <cmt> one-shot which was already due by the time the callback completed. </cmt> <cmt> this commit ensures that process_timers() only executes callbacks which </cmt> <cmt> were due when it started, so that timers which are added (or repeated) </cmt> <cmt> during process_timers() will wait for the next iteration - after mpv </cmt> <cmt> events are dequeued. </cmt> <cmt> this has no performance impact under normal conditions (when callbacks </cmt> <cmt> complete before the next timer is due). </cmt> <cmt> additionally, previously idle-observers were executed unconditionally </cmt> <cmt> after the timers because indeed there was nothing due when (if...) </cmt> <cmt> process_timers() completed. however, now process_timers() can return </cmt> <cmt> even if there are due timers, so skip idle-observers on such case. </cmt> <cmt> lua: idle observers: ensure timers are up-to-date </cmt> <cmt> this fixes two issues, both of which resulted from the timers-wait </cmt> <cmt> period not being re-calculated after idle-observers were executed: </cmt> <cmt> - if timers were added from an idle observer then they could fire long </cmt> <cmt> after they were due (only when/if the next mpv event arrives). </cmt> <cmt> - idle observers don't execute in zero time, and the wait period for </cmt> <cmt> the next timer was implicitly extended by the idle observers </cmt> <cmt> execution time (because it was calculated before the idle observers). </cmt> <cmt> this commit ensures that if idle-observers were executed, then the </cmt> <cmt> timers wait period is re-calculated, which solves both issues. </cmt>","[{'bart': 'several fixes for idle observers'}, {'t5': 'fix slow timer callbacks and prevent dequeuing mpv events'}, {'gold': 'refine timers and idle observers'}]"
"<desc> this extends the current matthews_corrcoef to handle the multiclass case. also fixes #7929 and #8354 the extension is defined here:  (pdf is behind a paywall, but the author has a website with details here  and my implementation follows equation (2) in this paper:  the new implementation can handle both the binary and multiclass case. i've left in the original binary case implementation for now (it is a bit faster and more clear as to what is going on). i've added new tests that inspect properties of the multiclass case as well as ensure that the multiclass case reduces to the binary case. there's not much else to say. this is a pretty straight forward change. </desc> <cmt> added support for multiclass mcc </cmt> <cmt> cleaned up implementation and referenced original paper </cmt> <cmt> accidently added temporary work </cmt> <iss> why am i getting 32 bit response for confusion_matrix when all the inputs are 64 bit? </iss>","[{'gold': 'added support for multiclass matthews correlation coefficient'}, {'t5': 'add support for multiclass mcc'}, {'bart': 'add support for multiclass mcc'}]"
"<desc> my code follows the code style of this project: c, python i have read the pr checklist document and have made the appropriate changes. i have read the contributing document. </desc> <cmt> add support for bm65rgb </cmt> <cmt> move bm65rgb to /kprepublic </cmt>","[{'bart': 'add support for bm65rgb'}, {'t5': 'add support for bm65rgb'}, {'gold': 'add support for bm65rgb, a revival of #13361'}]"
"<desc> issue: n/a this applies the eslint-plugin-storybook to the monorepo, as well as fixes for all of its recommended rules. there are quite a few changes. i added some @todo for discussions. </desc> <cmt> add eslint-plugin-storybook </cmt> <cmt> add temporary lint:storybook command </cmt> <cmt> link eslint-plugin locally </cmt> <cmt> clarify sb extract documentation </cmt> <cmt> upgrade eslint-plugin-storybook to official release </cmt> <cmt> attempt to fix some linting errors </cmt> <cmt> disable default-exports rules for storiesof files </cmt> <cmt> update eslint-plugin-storybook </cmt> <cmt> apply eslint-plugin-storybook to all files </cmt> <cmt> fix/disable eslint rules </cmt> <cmt> apply prefer-camel-case rule to all story files </cmt> <cmt> update eslint plugin and remove unecessary command </cmt>","[{'gold': 'add eslint-plugin-storybook to the repo'}, {'bart': 'apply eslint-plugin-storybook to monorepo'}, {'t5': 'apply eslint-plugin-storybook to monorepo'}]"
<desc> unified canadian aboriginal syllabics 1400-1488  common indic number forms a830-a839  coverage: </desc> <cmt> base: add common indic number forms to font katica regular 10 </cmt> <cmt> a830-a839 </cmt> <cmt> base: add unified canadian aboriginal syllabics to katica regular 10 </cmt> <cmt> 1400-1488 </cmt>,"[{'gold': 'add unified canadian aboriginal syllabics & common indic number forms to font katica regular 10'}, {'t5': 'unified canadian aboriginal syllabics 1400-1488'}, {'bart': 'add unified canadian aboriginal syllabics to katica regular 10'}]"
"<desc> update commons-compress to 1.21 due to cve-2021-35517 updated other apache.commons dependencies to latest version separate commits for addressing the commons-compress update and the other apache.commons updates the public api, i.e., is any changed class annotated with @public(evolving): (yes / no) </desc> <cmt> [flink-24034] upgrade commons-compress to 1.21 </cmt> <cmt> [flink-24034] update multiple apache.commons dependencies </cmt>","[{'gold': 'upgrade commons-compress to 1.21 and other apache.commons updates'}, {'bart': 'update commons-compress to 1.21 and update other apache.commons dependencies'}, {'t5': 'update commons-compress to 1.21'}]"
"<desc> there is lots of code in core.internals inside try/except blocks, in particular calls to _try_coerce_args.  it is tough to reason about these because it is often unclear what the raising cases are.  this simplifies that problem by separating values, args = self._try_coerce_args(values, args) into values = self._coerce_values(values) and args = self._try_coerce_args(args)  (note the former doesnt have a ""try"" in the name because it never raises). also: removed a never-used ndim kwarg from block.make_block and removed a now-redundant datetimetzblock.copy method. </desc> <cmt> separate coerce_values from coerce_args </cmt> <cmt> remove redundant method, move non-raising outside try </cmt> <cmt> remove ndim kwarg from make_block </cmt> <cmt> small cleanup </cmt>","[{'gold': 'separate raising from non-raising parts of method'}, {'t5': 'remove ndim kwarg from make_block'}, {'bart': 'separate coerce values from coerce_args in try/except blocks'}]"
"<desc> fixes #5598. background for quite a while, it was the case that when seeking the contextual type of a value, we would always get its apparent type afterwards. this was usually the behavior desired - otherwise, you'd typically run into problems with things like object literals and index signatures. during recent work on string literal types, this turned out to be undesirable because the widened type of a string literal type is the global string type. this was effectively useless because we needed to check whether the contextual type was string literal type or a union with a string literal type, so we separated out the concept of grabbing an expression's contextual type (with getcontextualtype) with grabbing the apparent type of that contextual type (getapparenttypeofcontextualtype). one thing missed in that change was that internally, getcontextualtype was calling getapparenttypeofcontextualtype unnecessarily. this means that if you had a parenthesized string literal, it could never be contextually typed by a string literal type - it would instead get contextually typed by the global string type. the reason the apparent type was necessary in some places is that when ""digging in"" to a type, it's necessary to get the apparent type to recognize its available members, the shape of its type constraint, etc.; however, the apparent type is not needed in simple cases where we simply propagate the type back. </desc> <cmt> added test for parenthesized string literals. </cmt> <cmt> added other tests for string literal types. </cmt> <cmt> accepted baselines. </cmt> <cmt> added tests for string literal types used as generic constraints. </cmt> <cmt> only get the apparent type when necessary. </cmt> <cmt> accepted baselines. </cmt>","[{'gold': 'only get the apparent type of a contextual type when needed'}, {'t5': 'get apparent type when necessary'}, {'bart': 'only get the apparent type when necessary.'}]"
"<desc> these two patches enable ""--relax"" and ""-fwhole-program"" to the linker and compiler of the marlin firmware.  these optimizations reduce overall code size and should also have an improvement to overall speed. for my printer, the size of the firmware went from 71109 bytes to 69203 bytes after applying these optimizations. </desc> <cmt> use linker ""--relax"" option. </cmt> <cmt> the ""relax"" option enables the linker to convert certain ""call"" </cmt> <cmt> instructions to the smaller ""rcall"" instruction.  this reduces the </cmt> <cmt> size of the resulting binary. </cmt> <cmt> use gcc ""-fwhole-program"" optimization. </cmt> <cmt> use ""whole program"" and ""link time optimization"" features of gcc.  the </cmt> <cmt> whole-program optimization enables the compiler to evaluate the entire </cmt> <cmt> firmware for optimization instead of just one code file at a time. </cmt> <cmt> this leads to better overall optimizations. </cmt>","[{'gold': 'add additional optimization flags to makefile'}, {'t5': 'use ""--relax"" and ""-fwhole-program"" optimizations'}, {'bart': 'use linker ""--relax"" and ""-fwhole-program"" optimizations'}]"
"<desc> add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). the package does not already provide its own types, or cannot have its .d.ts files generated via --declaration create it with dts-gen --dt, not by basing it on an existing project. tslint.json should be present, and tsconfig.json should have noimplicitany, noimplicitthis, strictnullchecks, and strictfunctiontypes set to true. provide a url to documentation or source code which provides context for the suggested changes: <> increase the version number in the header if appropriate. if you are making substantial changes, consider adding a tslint.json containing { ""extends"": ""dtslint/dt.json"" }. if a package was never on definitelytyped, you don't need to do anything. (if you wrote a package and provided types, you don't need to register it with us.) add it to notneededpackages.json. </desc> <cmt> add blob & file type for readfile api </cmt> <cmt> blob -> file </cmt>","[{'bart': 'add blob & file type for readfile api'}, {'t5': 'add blob & file type for readfile api'}, {'gold': 'addblob & file type for readfile api'}]"
"<desc> align redis chart documentation/readme to actual defaults. as shown here, the real default for master.service.type is clusterip, not loadbalancer. </desc> <cmt> fix docs to reflect actual default in values.yaml </cmt> <cmt> bump chart patch </cmt>","[{'t5': 'fix docs to reflect actual defaults in values.yaml'}, {'bart': 'align redis chart documentation/readme to actual defaults'}, {'gold': 'fix readme for master service type'}]"
"<desc> this pr is trying to fix compilation problems in gpu code with msvc 2015, in issue #439. @tt83 can you test if it removes all warnings? for the long string literal problem i am still trying to figure out a clean resolution. </desc> <cmt> fix warnings when compiled with -pedantic </cmt> <cmt> add -dboost_all_no_lib for windows build </cmt>","[{'t5': 'fix warnings when compiled with -pedantic'}, {'gold': 'fix compilation problems with msvc'}, {'bart': 'fix compilation problems in gpu with msvc 2015'}]"
"<desc> add more information in trace-api-plugin responses for better usage. add transaction_mroot, action_mroot and schedule_version in block trace; add status, cpu_usage_us, net_usage_words, signatures and transaction_header in transaction trace. see #9005 for release/2.0.x version </desc> <cmt> add more info in block trace & transaction trace. </cmt> <cmt> remove unused include; remove unnecessary copy when caching traces. </cmt> <cmt> add receipt check; remove unnecessary constructors </cmt> <cmt> fix wrong index </cmt>","[{'t5': 'add more information in trace-api-plugin responses'}, {'bart': 'add more information in trace-api-plugin responses'}, {'gold': '[develop]add more info in trace-api-plugin'}]"
"<desc> note the lnks here are being pulled from the search plugin, not the program plugin </desc> <cmt> removing description from title </cmt> <cmt> adjusting subtitle </cmt> <cmt> removing accidently paste </cmt> <cmt> removing desc for uwp apps </cmt> <cmt> getting dups removed from list if lnk exists </cmt> <cmt> adjusting subtitle </cmt> <cmt> removing accidently paste </cmt> <cmt> getting dups removed from list if lnk exists </cmt>","[{'t5': 'lnks removed from search plugin'}, {'bart': 'removing lnks from search and program plugins'}, {'gold': 'deduping results for program plugin'}]"
"<desc> fixes #35524 (80% solution) this pr makes the parser parse @link tag and the language service offer symbols for entity names found at the beginning of those tags. links are stored redundantly with comment text, so they're only used to provide (1) a span to an editor to format in some way (2) a symbol for the declaration of the link's target. future prs parse # as type-space element access: class#method. as well as, possibly, the normal ts syntax class[""method""], which doesn't currently parse either. open questions i parse @see {@link ...} as a @see with no reference and a link in its comment text. i think that's ok. i intentionally do not parse { @link x}, with a space separating { and @. i saw this only twice in my corpus, but @amcasey points out that it's easy to support with an additional skipwhitespace call. i originally skipped it because i had slightly less lookahead when the next token after { was @, but that made the code unreadable, so i dropped it. resolved questions i introduced jsdoctext and jsdoclink nodes into the ast, which better reflects the semantic relation of comments to their tags. it is more expensive, though, it means that jsdoc comment text is treated as a first-class member of the parse tree now. </desc> <cmt> initial scribbles </cmt> <cmt> compiles but provides spans instead of location pairs </cmt> <cmt> probably need to fork the services/server types and provide a conversion </cmt> <cmt> with session.tofilespan. not sure where to put the conversion. </cmt> <cmt> switch to documentspan </cmt> <cmt> in theory this is already better supported, but not sure practise bears </cmt> <cmt> that out. </cmt> <cmt> builds w/protocol types + conversions </cmt> <cmt> cleanup:better names and scrub todos </cmt> <cmt> fix test harness too </cmt> <cmt> misc </cmt> <cmt> 1. simplify protocol after talking to @mjbvz. </cmt> <cmt> 2. add more tests. </cmt> <cmt> 3. initial notes about where to add parsing. </cmt> <cmt> parse and store links in the compiler </cmt> <cmt> the text of the link is still stored in the comment text, but that's now </cmt> <cmt> kept in an object instead of just a string. each link has the parse for </cmt> <cmt> the entity reference, if there is one. </cmt> <cmt> needs lots more tests -- this just makes all the existing jsdoc tests </cmt> <cmt> pass. </cmt> <cmt> more tests and some fixes </cmt> <cmt> fix other failing tests </cmt> <cmt> fix bad merge </cmt> <cmt> polish parser </cmt> <cmt> improve names and array types </cmt> <cmt> slight tweaks </cmt> <iss> editor support for @see and {@link} in jsdoc comments tags </iss>","[{'gold': 'editor support for link tag'}, {'bart': 'parse @see and @link in jsdoc comments tags'}, {'t5': 'parse @see and @link in jsdoc comments tags'}]"
"<desc> adjust the filtering on data endpoint when a context parameter is used. for a requested time range (t1, t2) filter out the matching charts when their  last_entry_t < t1 is true component name database </desc> <cmt> test fix for k8s </cmt> <cmt> remove charts that have data before the ""after"" point in time </cmt> <cmt> remove incognito rrdr dimension flag </cmt>","[{'gold': 'fix the context filtering on the data query endpoint'}, {'bart': 'adjust the filtering on data endpoint when a context parameter is used'}, {'t5': 'fix for k8s - filtering on data endpoint'}]"
<desc> add or edit tests to reflect the change. follow the advice from the readme. avoid common mistakes. run npm test <package to test>. provide a url to documentation or source code which provides context for the suggested changes: </desc> <cmt> feat(ali-oss): add types of refresh token </cmt> <cmt> fix(ali-oss): change comment length </cmt>,"[{'gold': 'add def of refresh token in options'}, {'t5': 'add types of refresh token'}, {'bart': 'add types of refresh token'}]"
"<desc> same as pull request #1050. this facilitates playbook decision-making that are package manager based.  it also allows simple package installation across distributions in a single statement: -name: install wget action: $ansible_pkg_mgr name=wget state=present now implemented with a list of dicts to identify the package manager in use. </desc> <cmt> add pkg_mgr fact to setup </cmt> <cmt> this should help facilitate playbook decision making that are not </cmt> <cmt> strictly distribution specific, but more package manager. </cmt> <cmt> update package manager fact innards to a list of dicts </cmt>","[{'gold': 'add pkg_mgr fact to setup (take 2)'}, {'bart': 'add pkg_mgr fact to setup'}, {'t5': 'add pkg_mgr fact to setup'}]"
"<desc> fixes #81314 this pretty much just changes the span highlighted in the lint from pat_sp to ident.span. there's however an exception, which is in patterns with shorthands like point { y, ref mut x }, where a suggestion to change just x would be invalid; in those cases i had to keep the pattern span. another option would be suggesting something like point { y, x: ref mut _x }. i also added a new test since there weren't any test that checked the unused lint with optional patterns. </desc> <cmt> use identifier's span in unused lint </cmt> <cmt> bless some tests </cmt> <cmt> add regression test </cmt> <iss> span is too large for unused `rest @ ..` pattern warning </iss>","[{'gold': 'highlight identifier span instead of whole pattern span in unused lint'}, {'bart': ""use identifier's span in unused lint""}, {'t5': ""use identifier's span in unused lint""}]"
"<desc> most pager, by default, does not support control characters. so, the idea is to add a test after the set of pager to change it to less -r so control chars can be interpreted first, test for pager, than bat, than change. </desc> <cmt> added support of most </cmt> <cmt> only test if bat exists </cmt> <cmt> faster this way </cmt>","[{'t5': 'added support for most only test if bat exists faster'}, {'bart': 'add support for most pager control chars'}, {'gold': 'adding support for most pager'}]"
"<desc> solves #2544. unfortunately, coretemp sysctls are quite heavy calls. </desc> <cmt> add intel cpu temperature chart to freebsd plugin </cmt> <cmt> correct cycle for rrddim in cpu temperature chart </cmt> <cmt> fix data type and mib for coretemp sysctl in freebsd plugin </cmt> <cmt> limit sprintf usage in coretemp module in freebsd plugin </cmt>","[{'t5': 'fix sprintf usage in coretemp module in freebsd plugin'}, {'bart': 'fix cpu temperature chart in freebsd plugin'}, {'gold': 'add cpu temperature chart to freebsd plugin'}]"
"<desc> follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes: #23723 increase the version number in the header if appropriate. (not appropriate) if you are making substantial changes, consider adding a tslint.json containing { ""extends"": ""dtslint/dt.json"" }. (already exists) fixes #23723, along with other related improvements. generally increased support for properly typed results when using lodash with numericdictionary collections (object with numeric key type). in methods that use iterators (foreach, map, etc.), the key param of the iterator is now string to match the run-time type of keys of objects. omit now returns exactly the same kind of dictionary/numericdictionary that was provided as a param. many methods updated to remove overloads to handle numericdictionary explicitly, and now instead rely on more generic handling of t extends object where possible. many other methods that previously accepted dictionary param are now updated to also accept numericdictionary. added unit tests for mapvalues, which uncovered many flaws with signature overloads. added a few missing signatures, re-ordered as necessary, etc. removed explicit type parameters from many calls to methods in unit tests. several other small improvements/additions to unit tests. </desc> <cmt> change numericdictionaryiterator's ""key"" to type ""string"" </cmt> <cmt> finish updating unit tests </cmt> <cmt> improve support of numericdictionary. </cmt> <cmt> * update signature overloads of many methods. </cmt> <cmt> * improve many unit tests. </cmt> <cmt> fix some mapvalues overloads </cmt> <cmt> revert changes to v3 files </cmt> <cmt> improve _.omit to fully support dictionary and numericdictionary </cmt> <cmt> remove unused dictionaryiterator typedefs </cmt> <cmt> improve signatures of mapvalues and add tons of unit tests </cmt>","[{'bart': 'improve support for numericdictionary and mapvalues'}, {'gold': 'improve support for numericdictionary collections'}, {'t5': 'improve support for dictionary and numericdictionary'}]"
"<desc> since 3b6314c the pretty printer seems to only print trait bounds for ast::ty_path(...)s that have a generics arguments list. that seems wrong, so let's always print them. closes #9253, un-xfails test for #7673. </desc> <cmt> pp: typo in comment </cmt> <cmt> pp: also print bounds in paths with no generic params </cmt> <cmt> since 3b6314c3 the pretty printer seems to only print trait bounds for </cmt> <cmt> ast::ty_path(...)s that have a generics arguments list. that seems </cmt> <cmt> wrong, so let's always print them. </cmt> <cmt> closes #9253, un-xfails test for #7673. </cmt> <iss> pretty printer doesn't preserve built-in trait bounds on trait objects </iss>","[{'t5': 'print bounds in paths with no generic params'}, {'bart': 'also print bounds in paths with no generic params'}, {'gold': 'pretty-print bounds in paths with no generic params'}]"
"<desc> use npx and yarn create to run create-next-app for each example in examples/. this: requires no additional install from the user as these both come with their respective package managers (npx with node ^8.x.x) skips an additional command, reducing the ""getting-started"" friction keeps global install of create-next-app up to date (not sure if npx actually pulls the latest) installs create-<starter-kit-package> globally, or update the package to the latest version if it already exists - yarn docs for those interested, this was done by: removing the npm i -g ... line with: for d in * ( cd $d && sed -i '/npm i -g create-next-app/d' readme.md ) done prepending npx to the execution command with vscode find: create-next-app --example replace: npx create-next-app --example adding the yarn command with: for d in * ( cd $d && sed -i ""/npx create-next-app --example/a # or\nyarn create next-app --example $d $d-app"" readme.md ) done this would have been easier had i learned sed properly prior to step 1. or 2. and just written a single command. interesting nonetheless. </desc> <cmt> remove global npm install of create-next-app </cmt> <cmt> add npx to create-next-app command in examples </cmt> <cmt> add bash to shell snippets </cmt> <cmt> add yarn create to next-app command in examples </cmt> <cmt> fix readmes named with lowercase </cmt> <cmt> change readmes to use uppercase </cmt>","[{'t5': 'add npx and yarn create to create-next-app command'}, {'gold': 'use npx and yarn create to run create-next-app on examples'}, {'bart': 'use npx and yarn create in examples'}]"
"<desc> when storing renderer process callbacks in the main process, there are two keys for one remote object: 1) the webcontents id and 2) the object id. this pr extends the idweakmap to accept arbitrary key type so it is possible to use two ids as key, instead of relying on hacks to merge two ids into one id. close #5476. </desc> <cmt> remove unused methods of idweakmap </cmt> <cmt> add keyweakmap without add method </cmt> <cmt> fix leak when keyweakmap::remove is called directly </cmt> <cmt> usually the keyobject would be destroyed when gc happens, but then </cmt> <cmt> remove is called before gc happens, the keyobject would be leaked </cmt> <cmt> forever. this fixes it by keeping keyobject as a member of map. </cmt> <cmt> make keyweakmap a template class </cmt> <cmt> remove idweakmap </cmt> <cmt> use create function instead of idweakmap constructor </cmt> <cmt> turn api::idweakmap into api::keyweakmap<t> </cmt> <cmt> move createidweakmap to v8util </cmt> <cmt> use doubleidweakmap for |rendererfunctions| </cmt>","[{'gold': 'extend the idweakmap to accept arbitrary key type'}, {'t5': 'add idweakmap to v8util'}, {'bart': 'extend the idweakmap to accept arbitrary key type'}]"
"<desc> add or update assignment expression documentation for: faq - design reference - expressions reference - lexical analysis  automerge-triggered-by: @matrixise </desc> <cmt> (docs) add := to list of operators </cmt> <cmt> (docs) add operator precedence for := to reference - expressions </cmt> <cmt> (docs) replace faq for ""why can't i use an assignment expression?"" </cmt> <cmt> (docs) remove docs todo </cmt>","[{'t5': 'add assignment expression documentation for faq - design reference - expressions reference'}, {'gold': 'additional documentation for assignment expressions'}, {'bart': 'add and update assignment expression documentation'}]"
"<desc> when using kubectl describe <resource> <name> , the events returned for the resource do not use the eventseries.count and eventseries.lastobservedtime this pr adds the logic to compute the age of the event using these fields fixes kubernetes/kubectl#1095 changed kubectl describe to compute age of an event using the count and lastobservedtime fields available in the event series </desc> <cmt> take into account new fields for event </cmt> <cmt> add event with old event fields for test </cmt> <iss> ""kubectl describe <resource>"" doesn't take into account the new fields of core.v1/event </iss>","[{'bart': 'kubectl describe <resource> does not take into account new fields'}, {'t5': 'add event with old event fields for test'}, {'gold': 'use fields from event series when computing describe events for a object'}]"
<desc> to be merged when 1.15 has been released and we've updated our own prettier version. </desc> <cmt> update rationale about multiline object literals for the 1.15 changes </cmt> <cmt> add rationale about decorators for the 1.15 changes </cmt>,"[{'gold': 'update rationale for the 1.15 changes'}, {'bart': 'update rationale about multiline object literals for 1.15'}, {'t5': 'add rationale about multiline object literals for the 1.15 changes'}]"
<desc> this pull request add the support of can iso-tp address extensions in the socket module by enhancing getsockaddrarg and getsockname. note to core developpers : i believe this pull request should be backported back to python 3.3 where socketcan support have been added. </desc> <cmt> added support for can_isotp protocol </cmt> <cmt> added unit tests for can isotp </cmt> <cmt> updated documentation for iso-tp protocol </cmt>,"[{'gold': 'bpo-30987 - support for iso-tp protocol in socketcan'}, {'bart': 'add support for can iso-tp address extensions'}, {'t5': 'add support for can isotp address extensions'}]"
"<desc> in this pr, i fixed some bugs and add members property to response for the api getroominfo. now an example result of this api is like following: { ""roomid"": ""d2laekjpjwyssxrht"", ""roomname"": ""rocket.chat-experimental-basket-basketball-frvr-xqfx4gsxbn"", ""members"": [ { ""userid"": ""h6vzrjfv2wilf5map"", ""username"": ""kevin"", ""avatarurl"": "" ""status"": ""offline"" }, { ""userid"": ""b8dsjdragwdnj4p9z"", ""username"": ""anakin"", ""avatarurl"": "" ""status"": ""offline"" }, { ""userid"": ""rhwz9jaukm7w6rvnc"", ""username"": ""root"", ""avatarurl"": "" ""status"": ""online"" } ] } </desc> <cmt> [fix] the invalid room name issue </cmt> <cmt> [fix] limit externalcomponent name length </cmt> <cmt> add members property to response </cmt>","[{'t5': 'fix room name issue and add members property to response'}, {'bart': 'fix some bugs and add members property to response'}, {'gold': 'fix some bugs and add members property to response'}]"
"<desc> @matthiasplappert this pull request is a follow up to #1299 here we added -v1 environments: handmanipulate{block, egg, pen}touchsensors-v1 use original sensordata readings (mujoco); handmanipulate{block, egg, pen}touchsensors-v0 use boolean readings; and we also improved gym/envs/robotics/hand/manipulate_touch_sensors.py </desc> <cmt> envs/__init__.py: register all handmanipulate...touchsensors envs </cmt> <cmt> manipulate_touch_sensors.py > touch_get_obs='sensordata' </cmt> <cmt> handmanipulate...touchsensors-v0 - boolean sensor readings; handmanipulate...touchsensors-v1 - original mujoco sensordata readings; </cmt>","[{'gold': 'gym/envs/robotics - handmanipulate{block, egg, pen}touchsensors-v1'}, {'bart': 'handmanipulate touchsensors-v0, v0, and v1 environments'}, {'t5': 'handmanipulate...touchsensors-v1 - original mujoco sensordata readings'}]"
"<desc> fixes for a few outstanding issues. shap contribution dependency plots (an alternative to partial dependency plots). so far only 1d dependency plots are implemented, and no ggplot version. e.g., for a specific class in multiclass classification: set.seed(123) x <- as.matrix(iris[, -5]) is.na(x[sample(nrow(x) * 4, 30)]) <- true # introduce some missing values - will be shown in purple mbst <- xgboost(data = x, label = as.numeric(iris$species) - 1, nrounds = 20, max_depth = 2, eta = 0.1, subsample = .5, nthread = 2, objective = ""multi:softprob"", num_class = 3, verbose = 1) # for class 1 (versicolor) xgb.plot.shap(x, model = mbst, trees = seq(from=1, by=3, length.out=20), target_class = 1, top_n = 4, n_col = 2, col = rgb(0, 0, 1, 0.5), pch = 16, pch_na = 17) </desc> <cmt> [r] fix predict contributions for data with no colnames </cmt> <cmt> [r] add a render parameter for xgb.plot.multi.trees; fixes #2628 </cmt> <cmt> [r] update rd's </cmt> <cmt> [r] remove unnecessary dep-package from r cmake install </cmt> <cmt> silence type warnings; readability </cmt> <cmt> [r] silence complaint about incomplete line at the end </cmt> <cmt> [r] initial version of xgb.plot.shap() </cmt> <cmt> [r] more work on xgb.plot.shap </cmt> <cmt> [r] enforce black font in xgb.plot.tree; fixes #2640 </cmt> <cmt> [r] if feature names are available, check in predict that they are the same; fixes #2857 </cmt> <cmt> merging upstream changes </cmt>","[{'gold': 'maintenance nov 2017; shap plots'}, {'bart': 'add shap contribution dependency plots; fixes #2628'}, {'t5': 'fix shap contribution dependency plots'}]"
"<desc> see #14913 what is include in the pr: a fix for #14913 download image in found in issue #2447 (comment) resize the image check if all the metadata is there before this fix: after this fix: linked issue: #14913 communication: i've discussed this with core contributors in the issue. tests: added/updated and all pass installer: added/updated and all pass localization: all end user facing strings can be localized docs: added/ updated binaries: any new files are added to wxs / yml yml for signing for new binaries wxs for installer for new binaries a cla must be signed. if not, go over here and sign the cla. </desc> <cmt> metadata.clone() fails also for situations where we still can recover metadata </cmt> <cmt> metadata.clone() is also an expensive operation (deep copy) and it is not necessary anymore as we build up the metadata object from scratch anyway </cmt> <cmt> if an exception is throw here something is seriously wrong with the metadata structure </cmt> <cmt> we take all metadata we have read so far an write it to the resized image </cmt>","[{'gold': 'try to recover metadata even when the metadata data structure is invalid (#14913)'}, {'t5': 'resize image in a resize image'}, {'bart': 'fix for #14913 download image in found in #2447'}]"
<desc> make parenthesis optional for named expressions used with while statement. the following used to be a syntaxerror which should be valid according to pep 572. this pr fixes the same. while match := pattern.search(f.read()): pass feel free to rephrase news entry if needed. i couldn't come up with a good test for an actual program for this case without reading a file or iteration. so i have added a test only to test_parser to make sure this is syntactically valid. cc : @gvanrossum @emilyemorehouse </desc> <cmt> add parenthesis optional in named expressions for while statement </cmt> <cmt> add news entry </cmt>,"[{'bart': 'make parenthesis optional for named expressions used with while statement'}, {'gold': 'make parenthesis optional for named expression in while statement'}, {'t5': 'add parenthesis optional for named expressions used with while statement'}]"
"<desc> format the pull request title like [issue #123] fix unknownexception when host config not exist. each commit in the pull request should have a meaningful subject line and body. write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. if the new feature or significant change is committed, please remember to add integration-test in test module. run mvn -b clean package apache-rat:check findbugs:findbugs -dmaven.test.skip=true to make sure basic checks pass. run mvn clean install -dskipits to make sure unit-test pass. run mvn clean test-compile failsafe:integration-test  to make sure integration-test pass. </desc> <cmt> fix service metadata update failed problem. </cmt> <cmt> random connect to server </cmt> <cmt> add some metrics and log for service and client </cmt> <cmt> add some metrics and log for naming task worker </cmt>","[{'t5': 'fix unknownexception when host config not exist'}, {'gold': 'add some metrics and logs'}, {'bart': 'add some metrics and log for naming task worker'}]"
"<desc> important: this integration must be merged, not squashed! </desc> <cmt> sync from piper @368734211 </cmt> <cmt> protobuf_sync_piper </cmt> <cmt> merge tag 'refs/tags/sync-piper' into sync-stage </cmt> <cmt> # conflicts: </cmt> <cmt> #	src/google/protobuf/compiler/cpp/cpp_helpers.cc </cmt> <cmt> #	src/google/protobuf/port_def.inc </cmt> <cmt> ported c++ parse function generator to new enum names. </cmt> <cmt> updated changes.txt. </cmt>","[{'t5': 'sync from piper'}, {'gold': 'integrate from piper for c++, java, and python'}, {'bart': 'port parse function generator to new enum names'}]"
"<desc> fixes #52671 reverts return_timestamps from nxos, ios, iosxr #50261, #52670, #50323, #50095 timestamps can be implemented in task using </desc> <cmt> revert ""nxos_command:run_commands results failure when commands array size >1 (#52670)"" </cmt> <cmt> this reverts commit 0df5b92af37d43da20125dc418f1cb92390a8a25. </cmt> <cmt> revert ""added timestamps to nxos_command module (#50261)"" </cmt> <cmt> this reverts commit e1509433144572e5010d0ced72a2129600dd8bd4. </cmt> <iss> nxos_command:run_commands is broken when return_timestamps set to false </iss>","[{'bart': 'revert return_timestamps in nxos_command module'}, {'gold': 'revert nxos, ios, iosxr return_timestamps'}, {'t5': 'revert return_timestamps from nxos, ios, iosxr #50261, #52670, #50323, #50095'}]"
"<desc> please feel free to remove inapplicable items for your pr. the pr title starts with [mxnet-$jira_id], where $jira_id refers to the relevant jira issue created (except prs with tiny changes) all changes have test coverage: unit tests are added for small changes to verify correctness (e.g. adding a new operator) nightly tests are added for complicated/long-running ones (e.g. changing distributed kvstore) build tests will be added for build configuration changes (e.g. adding a new build option with nccl) code is well-documented: for user-facing api changes, api doc string has been updated. for new c++ functions in header files, their functionalities and arguments are documented. for new examples, readme.md is added to explain the what the example does, the source of the dataset, expected performance on test set and reference to the original paper if applicable check the api doc at  to the my best knowledge, examples are either not affected by this change, or have been fixed to be compatible with this change </desc> <cmt> add sparse block </cmt> <cmt> add sparse embedding </cmt> <cmt> add doc </cmt>","[{'gold': 'gluon sparse block and sparse embedding'}, {'bart': 'add sparse embedding for kvstore'}, {'t5': 'add sparse block and sparse embedding'}]"
<desc> these changes resolve all issues described in #8593 except for the linker issue. </desc> <cmt> fix compiler error due to mismatched braces (broken in f5fd897c1d) </cmt> <cmt> endian.h is not available on qnx </cmt> <cmt> add support for 64 bit qnx builds </cmt> <cmt> fix compiler error with brace initializer (conflicts with #8492) </cmt> <cmt> fix compiler error for empty default ctor for std::atomic<int> variables </cmt>,"[{'bart': 'add support for 64 bit qnx builds'}, {'gold': 'fix qnx 7.0 support #8593'}, {'t5': 'fix compiler error with brace initializer'}]"
"<desc> bug fixes others 1. support dy2stat error message when call paddle.jit.save before: when call paddle.jit.save(...), if exception is raised in dynamic-to-static, the exception is python native exception and not the optimized dy2stat exception. 2. polish error message 2.1 the original dygraph code is marked with (* user code *) ; 2.2  ""in user code:"" -> ""in transformed code:"" for example: </desc> <cmt> [dynamic-to-static] support dy2stat error message when call jit.save; </cmt> <cmt> add tests for error flags and for disable flags </cmt> <cmt> polish dy2stat error message: (1)add flag (* user code *) for original dygraph code; (2) ""in user code:"" -> ""in transformed code:"" </cmt>","[{'bart': 'fix dy2stat error message when call paddle.jit.save before:'}, {'t5': 'support dy2stat error message when call paddle.jit.save'}, {'gold': 'support dy2stat error message when call jit.save and polish error message'}]"
"<desc> checks that it can open as read rather than read/write; this will fix the eperm and ebusy errors on read. makes the error better for eperm and ebusy errors when they do happen on save closes #5102 closes #5107 closes #5112 closes #3231 </desc> <cmt> only check read permission on read </cmt> <cmt> add a better message for eperm errors. </cmt> <cmt> explicitly check if the path to be deserialized is a dir </cmt> <iss> saving read-only file causes dev tools to open </iss> <iss> uncaught error: eperm, operation not permitted when opening a readonly file </iss> <iss> atom can no longer open readonly files </iss> <iss> uncaught error: ebusy, resource busy or locked 'c:\code\ta.mobile\source\tamobile6simulator\bin\debug\trackabout.mobile.log' </iss>","[{'bart': 'only check read permission on read'}, {'t5': 'fix eperm and ebusy errors on read'}, {'gold': 'allow opening of readonly files'}]"
"<desc> extracted these fixes from #2520 </desc> <cmt> ci: fix a regression in setting up container_name </cmt> <cmt> container_name was just ignored because script(1) does not give env vars to child processes. </cmt> <cmt> in addition, this commit uses '?=' in check.mk to let container_name be overridable by env vars. </cmt> <cmt> ci: fix a regression that step scripts should have -e as the default does </cmt>","[{'t5': 'fix regression in setting up container_name'}, {'gold': 'fix regressions in gha migration'}, {'bart': 'fix a regression in setting up container_name'}]"
"<desc> reported in #750. includes fix to the test, which wasn't catching this bug. </desc> <cmt> fix: tests now catch bug reported in #750 (in hdf5 output layer) </cmt> <cmt> fix: both data and label now copied correctly in hdf5 output layer </cmt>","[{'gold': 'fix for bug in hdf5 output layer'}, {'bart': 'tests now catch bug reported in #750'}, {'t5': 'fix hdf5 output layer and hdf5 output layer'}]"
"<desc> remove some useless configure for bindings-generator of lua in the ini files of  tools/tolua, because these classes and functions no longer exist. </desc> <cmt> update comment for lua </cmt> <cmt> remove useless configure for bindings-generator of lua </cmt>","[{'bart': 'remove useless configure for bindings-generator of lua'}, {'t5': 'remove some useless configure for bindings-generator of lua'}, {'gold': 'update comments of lua and remove some useless configure for bindings-generator of lua'}]"
"<desc> xref #30539 </desc> <cmt> pandas\core\common.py:273: error: implicit generic ""any"". use ""typing.list"" and specify generic parameters </cmt> <cmt> pandas\core\arrays\categorical.py:514: error: implicit generic ""any"". use ""typing.list"" and specify generic parameters </cmt> <cmt> pandas\core\indexing.py:2227: error: implicit generic ""any"". use ""typing.tuple"" and specify generic parameters </cmt> <cmt> pandas\core\groupby\grouper.py:422: error: implicit generic ""any"". use ""typing.dict"" and specify generic parameters </cmt> <cmt> pandas\tests\frame\methods\test_replace.py:15: error: implicit generic ""any"". use ""typing.list"" and specify generic parameters </cmt> <cmt> pandas\tests\frame\methods\test_replace.py:20: error: implicit generic ""any"". use ""typing.list"" and specify generic parameters </cmt> <cmt> pandas\io\pytables.py:1462: error: implicit generic ""any"". use ""typing.list"" and specify generic parameters </cmt>","[{'t5': 'use ""typing.list"" and specify generic parameters pandascorearrayscategorical.py:514'}, {'gold': 'implicit generic ""any"" for builtins'}, {'bart': 'error: implicit generic ""any"".'}]"
<desc> follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes: since this pr #19777 got closed i picked it to provide the same fix increase the version number in the header if appropriate. i am not sure this is needed. i can fix it after code review note: i am quite new to typescript </desc> <cmt> fix onchange and onblur parameters </cmt> <cmt> add semicolon </cmt> <cmt> fix definition </cmt>,"[{'bart': 'fix onchange and onblur parameters'}, {'t5': 'fix onchange and onblur parameters'}, {'gold': 'redux form onchange onblur fix'}]"
<desc> addresses #20308 this pr ensures histgradientboostingclassifier is compatible with numpydoc. remove histgradientboostingclassifier from docstring_ignore_list. verify that all tests are passing. #dataumbrella sprint </desc> <cmt> remove histgradientboostingclassifier from docstring_ignore_list. </cmt> <cmt> fix numpydocs from histgradientboostingclassifier. </cmt>,"[{'bart': 'doc ensures that histgradientboostingclassifier passes numpydoc validation'}, {'gold': 'doc ensures that histgradientboostingclassifier passes numpydoc validation'}, {'t5': 'fix numpydocs from histgradientboostingclassifier'}]"
<desc> detect and diagnose invalid uses of trailing closures - either passed to a parameter which doesn't support that or extraneous e.g. func foo(x: int) {} foo { _ in } // can't pass trailing closure to int foo(x: 42) { _ in } // extraneous trailing closure. resolves: rdar://problem/55102498 </desc> <cmt> [constraintsystem] allow to check presence of fix by kind and locator </cmt> <cmt> [constraintsystem] intoduce a fix for incorrect use of trailing closures </cmt> <cmt> [diagnostics] add a diagnostic for incorrect use of trailing closures </cmt> <cmt> [constraintsystem] use new trailing closure fix in matchcallarguments </cmt> <cmt> [csdiag] nfc: remove obsolete trailing closure diagnostics </cmt>,"[{'gold': 'port invalid trailing closure use diagnostics'}, {'bart': 'detect and diagnose invalid uses of trailing closures'}, {'t5': 'fix invalid uses of trailing closures'}]"
"<desc> this fixes #1551. servers now respond to unparseable arguments with the invalid_argument status and the text of the deserialization error, instead of crashing. </desc> <cmt> added failing tests for server bad argument handling </cmt> <cmt> fixed server to handle invalid arguments without breaking </cmt> <iss> node rpc server cannot recover from malformed requests </iss>","[{'gold': 'handle invalid arguments sent to the node server'}, {'bart': 'fix server bad argument handling'}, {'t5': 'fix server to handle invalid arguments without breaking node'}]"
"<desc> these commits should fix all defects detected by coverity. </desc> <cmt> jsonservicedescription: fix cid 719179 and 719180 </cmt> <cmt> jsonrpc: fix cids 1194413, 1194414, 1194415, 1194416, 1213841 and 1213842 </cmt> <cmt> jsonrpc: fix cids 1228813, 1228816, 1228817, 1228818, 1228823 and 1228824 </cmt> <cmt> jsonrpc: fix cid 1273979 </cmt>","[{'gold': 'fix defects detected by coverity'}, {'bart': 'fix all defects detected by coverity'}, {'t5': 'fix cid 1273979, 1228816, 1228817, 1228818, 1228823 and 1228824'}]"
"<desc> follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes:  increase the version number in the header if appropriate. if you are making substantial changes, consider adding a tslint.json containing { ""extends"": ""dtslint/dt.json"" }. manual notification for @clmcgrath since bot says ""account can't be detected"". </desc> <cmt> updates flickity definitions for v2 and enables use as a module </cmt> <cmt> adds tslint.json and makes tslint happy </cmt>","[{'bart': 'update flickity definitions for v2 and enables use as a module'}, {'t5': 'update flickity definitions for v2'}, {'gold': 'updates flickity definitions for version 2 and enables use as a module'}]"
"<desc> calls to threadpool.markthreadexecution() and threadpool.markthreadcompletion() got removed in the 1.3 -> 1.4 rewrite.  this adds them back and gets the unit tests contributed by @nurkiewicz working.  thanks for those, @nurkiewicz! </desc> <cmt> hystrixthreadpoolmetrics.getrollingcountthreadsexecuted() always returns 0 in 1.4.x - failing test case </cmt> <cmt> conflicts: </cmt> <cmt> hystrix-core/src/main/java/com/netflix/hystrix/hystrixthreadpoolmetrics.java </cmt> <cmt> added back calls to threadpool.markthreadexecution() and .markthreadcompletion() in abstractcommand </cmt>","[{'t5': 'added back calls to threadpool.markthreadexecution() and threadpool.markthreadcompletion()'}, {'gold': 'added thread pool metrics back to execution flow'}, {'bart': 'add back calls to threadpool.markthreadexecution() and.markthreadcompletion() in abstractcommand'}]"
"<desc> closes #23865 closes #27075 tests added / passed passes black pandas passes git diff upstream/master -u -- ""*.py"" | flake8 --diff new tests addeded #23865 #27075 both reported that when df.groupby was called and by was set to more than one pd.categorical column, that any missing categories were not returned, even when observed=false. this issue was fixed in #29690. this pull request adds tests to make sure that this correct behaviour is enforced by tests. new bug found testing did reveal one further issue: dataframegroupby.count() returns nan for missing categories, when it should return a count of 0.  seriesgroupby.count() does return 0, which is the expected behaviour. i have raised an issue for this bug (#35028 ) and marked the test with an xfail. when the bug is fixed, the xfail will cause the tests to fail, and the xfail can be removed. existing test changed as it had the wrong expected result a similar issue was reported for .sum() in #31422: missing categories return a sum of nan when they should return a sum of 0. there was a mistake on the existing test for seriesgroupby.sum(), as it said the expected output was nan (see below) when it should have been 0. pandas/pandas/tests/groupby/test_categorical.py line 1315 0159cba (""sum"", np.nan), i have changed this so that the expected output is 0 (this is inline with the comment here: #31422 (comment) ) and marked the tests for .sum() with xfail. when the bug is addressed, the xfail will cause the tests to fail, and the xfails can be removed. </desc> <cmt> tests for dataframe.groupby with 2 categoricals </cmt> <cmt> black </cmt> <iss> inconsistant behaviour of empty groups when grouping with one vs. many </iss> <iss> groupby ignores unobserved combinations when passing more than one categorical column even if observed=true </iss>","[{'bart': 'dataframe.groupby.count() returns nan when it should return a sum of nan'}, {'gold': 'add test to ensure that df.groupby() returns the missing categories when grouping on 2 pd.categoricals'}, {'t5': 'black inconsistant behaviour of empty groups when grouping with one vs. many groupby ignores unobserved combinations when passing more than one categorical column'}]"
"<desc> closes #20303 tests added / passed: pytest pandas/tests/reshape/test_qcut.py pandas/tests/reshape/test_cut.py -v passes black pandas passes git diff upstream/master --name-only -- ""*.py"" | xargs flake8 whatsnew entry </desc> <cmt> update whatsnew file </cmt> <cmt> add bool to int coerce </cmt> <cmt> add bool to int coercion tests for cut and qcut </cmt> <cmt> syntax changes </cmt> <cmt> switch np.where condition to check if non nan </cmt> <iss> qcut raising typeerror for boolean series </iss>","[{'gold': 'coercing bool types to int in qcut'}, {'t5': 'add bool to int coercion tests for cut and qcut syntax'}, {'bart': 'add bool to int coerce for cut and qcut'}]"
<desc> allow apps to create direct messages; implements getmembers; allow apps to search for direct message rooms based on usernames; </desc> <cmt> allow apps to create direct messages </cmt> <cmt> implement getmembers; </cmt> <cmt> adds ability to search direct rooms by usernames </cmt>,"[{'bart': 'allow apps to create direct messages; implement getmembers; add ability to search for direct messages'}, {'t5': 'allow apps to create direct messages'}, {'gold': 'add more methods to deal with rooms via rocket.chat.apps'}]"
"<desc> fixes the slave encoder state syncing to reduce dropped pulses. includes fix for iris rev3/rev4 phantom pulses. fixes #7055 my code follows the code style of this project. i have read the contributing document. </desc> <cmt> updated slave encoder sync to reduce dropped pulses </cmt> <cmt> fixing encoder direction </cmt> <cmt> encoder behavior fixes, tested </cmt> <cmt> update keyboards/rgbkb/sol/keymaps/xulkal/rules.mk </cmt> <cmt> to make fauxpark happy </cmt> <cmt> update custom_encoder.c </cmt> <cmt> update rules.mk </cmt> <cmt> iris r4 fix </cmt> <iss> rotary encoder unresponsive on slave half of split keyboard </iss>","[{'t5': 'fix iris rev3/rev4 phantom pulses on slave'}, {'bart': 'fix for iris rev3/rev4 phantom pulses'}, {'gold': 'updated slave encoder sync to reduce dropped pulses - v2'}]"
"<desc> adding integration test class for stored procedures. providing a sql file to add stored procedure to mysql database. </desc> <cmt> added sql file to insert stored procedures in the mysql database </cmt> <cmt> added sql file to insert stored procedures in the mysql database </cmt> <cmt> removed sql file, to move to resources folder </cmt> <cmt> added named queries to foo model </cmt> <cmt> added foo stored procedures tests </cmt> <cmt> update readme.md - added link to stored procedure article </cmt>","[{'bart': 'added integration test class for stored procedures'}, {'t5': 'added sql file to insert stored procedures in mysql database'}, {'gold': 'bael-63 - add stored procedures with hibernate tests'}]"
"<desc> this pr targets the next branch and not master you've included links to relevant issues, if any with #issue_num </desc> <cmt> update readme 1 (manpages) </cmt> <cmt> update 2 (create config.md) </cmt> <cmt> readme update final 1 </cmt> <cmt> rename to config </cmt> <cmt> readme update final 2 </cmt> <cmt> small update </cmt>","[{'bart': 'update readme and config.md'}, {'t5': 'rename to config readme'}, {'gold': 'update to documentation by  raz0rr-two'}]"
"<desc> fixes: #8673 when the inferred path already exists, throw generic error to provide better error message. </desc> <cmt> throw an error if the inferred output path already exists. </cmt> <cmt> simplify file exists check </cmt> <iss> deno 1.6 compile getting error: is a directory (os error 21) </iss>","[{'bart': 'throw generic error if the inferred output already exists'}, {'t5': 'fix inferred path in deno 1.6'}, {'gold': 'throw error when the inferred output path already exists during compile'}]"
<desc> augments #6697 to emit readonly modifier in declaration file for get-only accessors in classes. </desc> <cmt> emit readonly in declaration file for get-only accessors in classes </cmt> <cmt> adding more test cases </cmt> <cmt> accepting new baselines </cmt>,"[{'bart': 'emit readonly modifier in declaration file for get-only accessors in classes'}, {'gold': 'readonly in declaration files (part 2)'}, {'t5': 'add readonly modifier in declaration file for get-only accessors in classes'}]"
"<desc> this major change to slate removed change and folded all of its functionality into the editor controller. i have updated the slate definitions to reflect this, included doc comments for the new commands, and added additional tests. i've also applied the respective changes to the slate-react package. this is quite a large change so any feedback is appreciated add or edit tests to reflect the change. (run with npm test.) follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes: pr merge increase the version number in the header if appropriate. </desc> <cmt> implement new 'command' logic for editor </cmt> <cmt> merge remote-tracking branch 'upstream/master' </cmt> <cmt> add tests for commands </cmt> <cmt> fix slate-react tests </cmt> <cmt> revert unintended change </cmt> <cmt> version number </cmt>","[{'bart': ""implement new 'command' logic for editor""}, {'t5': ""add new 'command' logic for editor""}, {'gold': 'update typings to reflect new command structure'}]"
"<desc> based off #19946 </desc> <cmt> [v1.x] migrate to use ecr as docker cache instead of dockerhub (#19654) </cmt> <cmt> [v1.x] update ci build scripts to install python 3.6 from deadsnakes repo (#19788) </cmt> <cmt> * install python3.6 from deadsnakes repo, since 3.5 is eol'd and get-pip.py no longer works with 3.5. </cmt> <cmt> * set symlink for python3 to point to newly installed 3.6 version. </cmt> <cmt> * setting symlink or using update-alternatives causes add-apt-repository to fail, so instead just set alias in environment to call the correct python version. </cmt> <cmt> * setup symlinks in /usr/local/bin, since it comes first in the path. </cmt> <cmt> * don't use absolute path for python3 executable, just use python3 from path. </cmt> <cmt> disable unix-gpu-cu110 pipeline for v1.x build since we now build with cuda 11.0 in windows pipelines. (#19828) </cmt> <cmt> [v1.x] for ecr, ensure we sanitize region input from environment variable (#19882) </cmt> <cmt> * set default for cache_intermediate. </cmt> <cmt> * make sure we sanitize region extracted from registry, since we pass it to os.system. </cmt> <cmt> [v1.x] address ci failures with docker timeouts (v2) (#19890) </cmt> <cmt> * add random sleep only, since retry attempts are already implemented. </cmt> <cmt> * reduce random sleep to 2-10 sec. </cmt> <cmt> [v1.x] ci fixes to make more stable and upgradable (#19895) </cmt> <cmt> * test moving pipelines from p3 to g4. </cmt> <cmt> * remove fallback codecov command - the existing (first) command works and the second always fails a few times before finally succeeding (and also doesn't support the -p parameter, which causes an error.) </cmt> <cmt> * stop using docker python client, since it still doesn't support latest nvidia 'gpus' attribute. switch to using subprocess calls using list parameter (to avoid shell injections). </cmt> <cmt> see </cmt> <cmt> * remove old files. </cmt> <cmt> * fix comment </cmt> <cmt> * set default environment variables </cmt> <cmt> * fix gpu syntax. </cmt> <cmt> * use subprocess.run and redirect output to stdout, don't run docker in interactive mode. </cmt> <cmt> * check if codecov works without providing parameters now. </cmt> <cmt> * send docker stderr to sys.stderr </cmt> <cmt> * support both nvidia-docker configurations, first try '--gpus all', and if that fails, then try '--runtime nvidia'. </cmt> <cmt> fix cd </cmt> <cmt> fix cudnn version for cu10.2 buiuld </cmt> <cmt> war the dataloader issue with forked processes holding stale references (#19924) </cmt>","[{'t5': ""fix ci failures with nvidia 'gpus' attribute""}, {'bart': 'update ci build scripts to use python 3.6'}, {'gold': 'attemp to fix cd for v1.8.x'}]"
"<desc> reverted recent change on adding --no-includes to darttest.sh and modified the source generator for dart  to exclude emitting those includes at all. they are not used in any of the tests. ran . src/clang-format-git.sh and fixed two other c++ issues that were recently introduced. tested: tests/darttest.sh with dart 2.8.1 </desc> <cmt> fixed refractoring issue in reflection/generate_code.sh. also, mv deletes the original file, so i don't need to clean it up manually in that case. </cmt> <cmt> merge remote-tracking branch 'upstream/master' </cmt> <cmt> merge remote-tracking branch 'upstream/master' </cmt> <cmt> merge remote-tracking branch 'upstream/master' </cmt> <cmt> merge remote-tracking branch 'upstream/master' </cmt> <cmt> fixed dart tests by removing code-gen for included files. </cmt>","[{'gold': 'getting tests/darttest.sh to work on master.'}, {'t5': 'fix dart tests by removing code-gen for included files'}, {'bart': 'fixed dart tests by removing code-gen for included files.'}]"
"<desc> fix #1698 #1609 format the pull request title like [issue #123] fix unknownexception when host config not exist. each commit in the pull request should have a meaningful subject line and body. write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. if the new feature or significant change is committed, please remember to add integration-test in test module. run mvn -b clean package apache-rat:check findbugs:findbugs -dmaven.test.skip=true to make sure basic checks pass. run mvn clean install -dskipits to make sure unit-test pass. run mvn clean test-compile failsafe:integration-test  to make sure integration-test pass. </desc> <cmt> subject to the actual startup context path </cmt> <cmt> if not set the context path with the webserverinitializedevent then real '/' is context path </cmt> <cmt> runningconfig support get from spring.properties configuration file </cmt> <cmt> 1. optimize log printing </cmt> <cmt> 2. improve the robustness and readability of your code </cmt> <cmt> support datum is null case </cmt> <cmt> repair httpgetlarge#httpgetlarge will call entity.getcontenttype().getelements() the contenttype is npe </cmt> <cmt> normalize http response entity with responseentity by spring </cmt> <iss> nullpointer exception if sync content is empty </iss>","[{'bart': 'normalize http response entity with responseentity by spring'}, {'t5': 'fix unknownexception when host config not exist'}, {'gold': 'repair the npe and optimize related code'}]"
"<desc> adds the offset field to the indexsymbol struct. this lets code using swift::index functions skip any line/column -> offset reverse calculation if the specific byte offset location is desired. </desc> <cmt> make swift indexing code capture symbol start/end offset within the current source file. </cmt> <cmt> merge remote-tracking branch 'upstream/master' </cmt> <cmt> make symbol info only store symbol occurrence offset, not start/end offset. the rest can be determined from the source manager by finding the token's sourceloc. </cmt> <cmt> merge remote-tracking branch 'apple/master' </cmt> <cmt> remove unnecessary lexer.h include. </cmt>","[{'t5': 'add the offset field to the indexsymbol struct'}, {'bart': 'add offset field to indexsymbol struct'}, {'gold': 'store symbol byte offset in indexsymbol'}]"
<desc> the cloudbees build/release config has been upgraded to assuming nebula rxjava plugin 2.x which assumes gradle 2. this is an attempt to upgrade this project. see #117 </desc> <cmt> upgrade to nebula 2.x and gradle-rxjava-project-plugin 2.x </cmt> <cmt> disable sample-app </cmt> <cmt> it doesn't work with gradle 2 </cmt>,"[{'bart': 'upgrade cloudbees build/release config to assume nebula rxjava plugin 2.x'}, {'t5': 'upgrade to nebula rxjava plugin 2.x'}, {'gold': 'upgrade nebula plugin and gradle'}]"
<desc> follow the advice from the readme. avoid common mistakes. run npm run lint package-name (or tsc if no tslint.json is present). provide a url to documentation or source code which provides context for the suggested changes:  turns out there were more methods and properties needed. </desc> <cmt> add unload method to webtwainenv </cmt> <cmt> add containers property to webtwainenv </cmt> <cmt> define arguments for registerevent callback function </cmt>,"[{'gold': 'add methods and properties to webtwainenv'}, {'bart': 'add more methods and properties to webtwainenv'}, {'t5': 'add container property to webtwainenv'}]"
"<desc> rules-tags defaults to [""recommended""], not empty list close #12615 </desc> <cmt> fix(lint): use recommend if config without tags </cmt> <cmt> fix lint </cmt> <iss> bug(cli/lint): all rules are ignored if the config is changed </iss>","[{'bart': 'use recommend if config without tags'}, {'gold': 'use recommended tag if there is no tags in config file or flags'}, {'t5': 'fix lint bug(cli/lint)'}]"
